<%- include('../../views/partials/admin/header', {title: 'Category'}) %>

<link href="https://fonts.googleapis.com/css2?family=Quantico:wght@400;700&display=swap" rel="stylesheet">
<style>
  body {
    font-family: 'Quantico', sans-serif;
  }
  .hidden {
    display: none;
  }
</style>

<!-- Main Content -->
<div class="w-full md:w-4/5 p-4 md:p-6 bg-white">
  <!-- Header -->
  <div class="text-black flex justify-between items-center mb-4 md:mb-6">
    <h1 class="text-2xl md:text-3xl font-bold">Category</h1>
  </div>

  <!-- Form -->
  <form action="/admin/addCategory" method="POST" onsubmit="return handleFormSubmit(event)" class="mb-4">
    <div class="flex flex-col md:flex-row space-y-3 md:space-y-0 md:space-x-4 mb-3 md:mb-4">
      <div class="w-full">
        <label class="block text-black text-sm md:text-base">Name</label>
        <input name="name" type="text" class="border rounded px-3 py-2 w-full text-black" placeholder="Name">
        <p class="text-red-600 error-message hidden" id="name-error"></p>
      </div>
      <div class="w-full">
        <label class="block text-black text-sm md:text-base">Description</label>
        <input name="description" type="text" class="border rounded px-3 py-2 w-full text-black" placeholder="Description" id="descriptionId">
        <p class="text-red-600 error-message hidden" id="description-error"></p>
      </div>
      <div class="flex items-end w-full">
        <button type="submit" class="bg-gray-500 text-white px-4 py-2 rounded w-full md:w-auto text-sm md:text-base">Add</button>
      </div>
    </div>
  </form>

<!-- Search Bar -->
  <div class="flex justify-end mb-3 md:mb-4">
    <div class="relative w-full md:w-80">
      <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
        <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
        </svg>
      </div>
      <input type="text" id="searchInput" class="block w-full pl-10 pr-20 py-3 border border-gray-300 rounded-lg text-gray-900 placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 shadow-sm" placeholder="Search categories..." value="<%= searchQuery %>">
      <button id="searchButton" class="absolute right-2 top-1/2 transform -translate-y-1/2 bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md text-sm font-medium transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 shadow-sm">Search</button>
    </div>
  </div>

  <!-- Table -->
  <div class="bg-white shadow rounded overflow-x-auto text-black">
    <table class="min-w-full text-center" id="categoryTable">
      <thead>
        <tr class="bg-gray-200">
          <th class="p-2 md:p-3 text-sm md:text-base">Name</th>
          <th class="p-2 md:p-3 text-sm md:text-base">Description</th>
          <th class="p-2 md:p-3 text-sm md:text-base">Offer Price</th>
          <th class="p-2 md:p-3 text-sm md:text-base">Offer</th>
          <th class="p-2 md:p-3 text-sm md:text-base">Status</th>
          <th class="p-2 md:p-3 text-sm md:text-base">List/Unlist</th>
          <th class="p-2 md:p-3 text-sm md:text-base">Edit</th>
        </tr>
      </thead>
      <tbody id="categoryTableBody">
        <% cat.reverse().forEach((category, index) => { %>
          <tr data-category-id="<%= category._id %>">
            <td class="p-2 md:p-3 text-sm md:text-base"><%= category.name %></td>
            <td class="p-2 md:p-3 text-sm md:text-base"><%= category.description %></td>
            <td class="p-2 md:p-3 text-sm md:text-base">
              <% if (category.categoryOffer) { %>
                <%= category.categoryOffer %>%
              <% } else { %>
                0%
              <% } %>
            </td>
            <td class="p-2 md:p-3">
              <div class="flex justify-center space-x-1 md:space-x-2">
                <% if (category.categoryOffer === 0) { %>
                  <button class="bg-blue-500 text-white px-2 py-1 md:px-3 md:py-1 rounded text-xs md:text-sm" onclick="event.preventDefault(); addOffer('<%= category._id %>')">Add</button>
                <% } else { %>
                  <button class="bg-gray-300 text-black px-2 py-1 md:px-3 md:py-1 rounded text-xs md:text-sm" onclick="event.preventDefault(); removeOffer('<%= category._id %>')">Remove</button>
                <% } %>
              </div>
            </td>
            <td class="p-2 md:p-3">
              <span class="status-span px-2 py-1 md:px-3 md:py-1 rounded text-xs md:text-sm <%= category.isListed ? 'bg-green-200 text-green-800' : 'bg-red-200 text-red-800' %>">
                <%= category.isListed ? 'Listed' : 'Unlisted' %>
              </span>
            </td>
            <td class="p-2 md:p-3">
              <button class="toggle-list-btn px-2 py-1 md:px-3 md:py-1 rounded text-xs md:text-sm <%= category.isListed ? 'bg-red-500 text-white' : 'bg-green-500 text-white' %>"
                      onclick="toggleListStatus('<%= category._id %>', <%= category.isListed %>)">
                <%= category.isListed ? 'UNLIST' : 'LIST' %>
              </button>
            </td>
            <td class="p-2 md:p-3">
              <button class="bg-blue-300 text-white px-2 py-1 md:px-3 md:py-1 rounded text-xs md:text-sm">
                <a href="/admin/editCategory?id=<%= category._id %>" class="text-white">Edit</a>
              </button>
            </td>
          </tr>
        <% }) %>
      </tbody>
    </table>
  </div>

  <!-- Pagination -->
  <div class="pagination-container flex justify-center space-x-2 mt-4" id="paginationContainer">
    <% if (currentPage > 1) { %>
      <a href="#" class="pagination-link px-3 py-1 bg-gray-200 rounded" data-page="<%= currentPage - 1 %>">« Previous</a>
    <% } %>
    <% for (let i = 1; i <= totalPage; i++) { %>
      <% if (i === currentPage) { %>
        <span class="current-page px-3 py-1 bg-yellow-500 text-white rounded"><%= i %></span>
      <% } else { %>
        <a href="#" class="pagination-link px-3 py-1 bg-gray-200 rounded" data-page="<%= i %>"><%= i %></a>
      <% } %>
    <% } %>
    <% if (currentPage < totalPage) { %>
      <a href="#" class="pagination-link px-3 py-1 bg-gray-200 rounded" data-page="<%= currentPage + 1 %>">Next »</a>
    <% } %>
  </div>
</div>

<!-- <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script> -->
<script>
function handleFormSubmit(event) {
    event.preventDefault();
    if (!validateForm()) {
        return;
    }

    const name = document.getElementsByName("name")[0].value.trim();
    const description = document.getElementById("descriptionId").value.trim();

    fetch('/admin/addCategory', {
        method: 'POST',
        headers: {
            'content-type': 'application/json'
        },
        body: JSON.stringify({ name, description })
    })
    .then(response => {
        if (!response.ok) {
            return response.json().then(err => {
                throw new Error(err.error);
            });
        }
        return response.json();
    })
    .then(data => {
        Swal.fire({
            toast: true,
            icon: 'success',
            title: 'Category Added',
            text: 'The category has been added',
            showConfirmButton: false,
            timer: 3000,
            background: '#000',
            color: 'yellow',
            iconColor: '#00ff00'
        }).then(() => loadCategories(1, document.getElementById('searchInput').value));
    })
    .catch(error => {
        if (error.message === "Category already exist !") {
            Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: "Category already exist !"
            });
        } else {
            Swal.fire({
                icon: 'error',
                title: "Oops...",
                text: "An error occurred while adding the category",
                confirmButtonText: 'OK'
            }).then(() => {
                window.location.href = '/admin/pageerror?statusCode=500';
            });
        }
    });
}

function validateForm() {
    clearErrorMessage();
    const name = document.getElementsByName("name")[0].value.trim();
    const description = document.getElementById("descriptionId").value.trim();
    let isValid = true;

    if (name === "") {
        displayErrorMessage("name-error", "Please enter a name");
        isValid = false;
    } else if (!/^[a-zA-Z\s]+$/.test(name)) {
        displayErrorMessage("name-error", "Name should only contain alphabetic characters");
        isValid = false;
    }

    if (description === "") {
        displayErrorMessage("description-error", "Please enter a description");
        isValid = false;
    }

    return isValid;
}

function displayErrorMessage(elementId, message) {
    const errorElement = document.getElementById(elementId);
    errorElement.innerText = message;
    errorElement.style.display = "block";
}

function clearErrorMessage() {
    const errorElements = document.getElementsByClassName("error-message");
    Array.from(errorElements).forEach((element) => {
        element.innerText = "";
        element.style.display = "none";
    });
}

async function addOffer(categoryId) {
    try {
        const { value: amount } = await Swal.fire({
            title: "Offer in percentage",
            input: "number",
            inputLabel: "Percentage",
            inputPlaceholder: "%"
        });

        if (amount) {
            const response = await fetch('/admin/addCategoryOffer', {
                method: 'POST',
                headers: {
                    'content-type': 'application/json',
                },
                body: JSON.stringify({
                    percentage: amount,
                    categoryId: categoryId,
                }),
            });

            const data = await response.json();
            if (response.ok && data.status === true) {
                await Swal.fire({
                    toast: true,
                    icon: 'success',
                    title: 'Offer Added',
                    text: 'The offer has been added',
                    showConfirmButton: false,
                    timer: 3000,
                    background: '#000',
                    color: 'yellow',
                    iconColor: '#00ff00'
                }).then(() => loadCategories(getCurrentPage(), document.getElementById('searchInput').value));
            } else {
                await Swal.fire("Failed", data.message || "Adding offer failed", "error");
            }
        }
    } catch (error) {
        await Swal.fire("Error", "An error occurred while adding the offer", "error").then(() => {
            window.location.href = '/admin/pageerror?statusCode=500';
        });
        console.error("Error while adding the offer", error);
    }
}

async function removeOffer(categoryId) {
    try {
        const response = await fetch('/admin/removeCategoryOffer', {
            method: 'POST',
            headers: {
                'content-type': 'application/json'
            },
            body: JSON.stringify({
                categoryId: categoryId
            })
        });

        const data = await response

.json();
        if (response.ok && data.status === true) {
            await Swal.fire({
                toast: true,
                icon: 'success',
                title: 'Offer Removed',
                text: 'The offer has been removed',
                showConfirmButton: false,
                timer: 3000,
                background: '#000',
                color: 'yellow',
                iconColor: '#00ff00'
            }).then(() => loadCategories(getCurrentPage(), document.getElementById('searchInput').value));
        } else {
            await Swal.fire("Failed", data.message || "Removing offer failed", "error");
        }
    } catch (error) {
        await Swal.fire("Error", "An error occurred while removing the offer", "error").then(() => {
            window.location.href = '/admin/pageerror?statusCode=500';
        });
        console.error("Error while removing the offer => ", error);
    }
}

async function toggleListStatus(categoryId, isListed) {
    try {
        const endpoint = isListed ? '/admin/listCategory' : '/admin/unlistCategory';
        const response = await fetch(endpoint, {
            method: 'PATCH',
            headers: {
                'content-type': 'application/json'
            },
            body: JSON.stringify({ id: categoryId })
        });

        const data = await response.json();
        if (response.ok && data.status === true) {
            await Swal.fire({
                toast: true,
                icon: 'success',
                title: isListed ? 'Category Unlisted' : 'Category Listed',
                text: data.message,
                showConfirmButton: false,
                timer: 3000,
                background: '#000',
                color: 'yellow',
                iconColor: '#00ff00'
            }).then(() => loadCategories(getCurrentPage(), document.getElementById('searchInput').value));
        } else {
            await Swal.fire("Failed", data.message || "Operation failed", "error");
        }
    } catch (error) {
        await Swal.fire("Error", "An error occurred while updating the status", "error").then(() => {
            window.location.href = '/admin/pageerror?statusCode=500';
        });
        console.error("Error while toggling list status => ", error);
    }
}

function getCurrentPage() {
    const currentPageElement = document.querySelector('.current-page');
    return currentPageElement ? parseInt(currentPageElement.textContent) : 1;
}

async function loadCategories(page, searchQuery = '') {
    try {
        const response = await fetch(`/admin/category?page=${page}&search=${encodeURIComponent(searchQuery)}`, {
            headers: {
                'X-Requested-With': 'XMLHttpRequest'
            }
        });
        const data = await response.json();

        if (response.ok) {
            updateCategoryTable(data.cat);
            updatePagination(data.currentPage, data.totalPage);
        } else {
            await Swal.fire("Error", data.error || "Failed to load categories", "error").then(() => {
                window.location.href = '/admin/pageerror?statusCode=500';
            });
        }
    } catch (error) {
        await Swal.fire("Error", "An error occurred while loading categories", "error").then(() => {
            window.location.href = '/admin/pageerror?statusCode=500';
        });
        console.error("Error loading categories:", error);
    }
}

function updateCategoryTable(categories) {
    const tbody = document.getElementById('categoryTableBody');
    tbody.innerHTML = '';
    categories.reverse().forEach(category => {
        const row = document.createElement('tr');
        row.setAttribute('data-category-id', category._id);
        row.innerHTML = `
            <td class="p-2 md:p-3 text-sm md:text-base">${category.name}</td>
            <td class="p-2 md:p-3 text-sm md:text-base">${category.description}</td>
            <td class="p-2 md:p-3 text-sm md:text-base">${category.categoryOffer ? category.categoryOffer + '%' : '0%'}</td>
            <td class="p-2 md:p-3">
                <div class="flex justify-center space-x-1 md:space-x-2">
                    ${category.categoryOffer === 0 ?
                        `<button class="bg-blue-500 text-white px-2 py-1 md:px-3 md:py-1 rounded text-xs md:text-sm" onclick="event.preventDefault(); addOffer('${category._id}')">Add</button>` :
                        `<button class="bg-gray-300 text-black px-2 py-1 md:px-3 md:py-1 rounded text-xs md:text-sm" onclick="event.preventDefault(); removeOffer('${category._id}')">Remove</button>`}
                </div>
            </td>
            <td class="p-2 md:p-3">
                <span class="status-span px-2 py-1 md:px-3 md:py-1 rounded text-xs md:text-sm ${category.isListed ? 'bg-green-200 text-green-800' : 'bg-red-200 text-red-800'}">
                    ${category.isListed ? 'Listed' : 'Unlisted'}
                </span>
            </td>
            <td class="p-2 md:p-3">
                <button class="toggle-list-btn px-2 py-1 md:px-3 md:py-1 rounded text-xs md:text-sm ${category.isListed ? 'bg-red-500 text-white' : 'bg-green-500 text-white'}" onclick="toggleListStatus('${category._id}', ${category.isListed})">
                    ${category.isListed ? 'UNLIST' : 'LIST'}
                </button>
            </td>
            <td class="p-2 md:p-3">
                <button class="bg-blue-300 text-white px-2 py-1 md:px-3 md:py-1 rounded text-xs md:text-sm">
                    <a href="/admin/editCategory?id=${category._id}" class= "text-white">Edit</a>
                </button>
            </td>
        `;
        tbody.appendChild(row);
    });
}

function updatePagination(currentPage, totalPage) {
    const container = document.getElementById('paginationContainer');
    container.innerHTML = '';
    if (currentPage > 1) {
        container.innerHTML += `<a href="#" class="pagination-link px-3 py-1 bg-gray-200 rounded" data-page="${currentPage - 1}">« Previous</a>`;
    }
    for (let i = 1; i <= totalPage; i++) {
        if (i === currentPage) {
            container.innerHTML += `<span class="current-page px-3 py-1 bg-yellow-500 text-white rounded">${i}</span>`;
        } else {
            container.innerHTML += `<a href="#" class="pagination-link px-3 py-1 bg-gray-200 rounded" data-page="${i}">${i}</a>`;
        }
    }
    if (currentPage < totalPage) {
        container.innerHTML += `<a href="#" class="pagination-link px-3 py-1 bg-gray-200 rounded" data-page="${currentPage + 1}">Next »</a>`;
    }

    document.querySelectorAll('.pagination-link').forEach(link => {
        link.addEventListener('click', (e) => {
            e.preventDefault();
            const page = parseInt(e.target.getAttribute('data-page'));
            loadCategories(page, document.getElementById('searchInput').value);
        });
    });
}

document.getElementById('searchButton').addEventListener('click', () => {
    loadCategories(1, document.getElementById('searchInput').value);
});



document.querySelectorAll('.pagination-link').forEach(link => {
    link.addEventListener('click', (e) => {
        e.preventDefault();
        const page = parseInt(e.target.getAttribute('data-page'));
        loadCategories(page, document.getElementById('searchInput').value);
    });
});
</script>

<%- include('../../views/partials/admin/footer') %>