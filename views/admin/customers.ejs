<%- include('../../views/partials/admin/header', {title: 'Customers'}) %>

<link href="https://fonts.googleapis.com/css2?family=Quantico:wght@400;700&display=swap" rel="stylesheet">
<style>
  body {
    font-family: 'Quantico', sans-serif;
  }
</style>

<!-- Main Section -->
<main class="flex-1 p-4 md:p-6 w-full max-w-full box-border overflow-x-hidden min-h-[calc(100vh-120px)]">
    <div class="bg-white rounded-lg shadow-lg border border-gray-200">
        <div class="p-4 border-b border-gray-300 flex flex-col sm:flex-row justify-between items-center text-black bg-gradient-to-r from-gray-50 to-gray-100 gap-4">
            <h2 class="text-2xl font-bold text-gray-800">CUSTOMERS</h2>
            <div class="relative flex items-center w-full max-w-xs sm:max-w-sm">
                <input type="text" id="searchInput" placeholder="Search by name or email..." class="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-full focus:outline-none focus:ring-2 focus:ring-gray-400 bg-white shadow-sm" value="<%= searchQuery || '' %>">
                <svg class="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                </svg>
                <button id="searchButton" class="ml-2 bg-gray-500 text-white px-4 py-2 rounded text-sm md:text-base">Search</button>
            </div>
        </div>
        <div class="p-4">
            <div class="overflow-x-auto w-full">
                <table class="w-full text-left min-w-[600px]" id="customerTable">
                    <thead>
                        <tr class="bg-gradient-to-r from-gray-200 to-gray-300 text-gray-800 shadow-inner">
                            <th class="p-3 border-b border-gray-400 max-w-[150px] truncate">ID</th>
                            <th class="p-3 border-b border-gray-400 max-w-[150px] truncate">NAME</th>
                            <th class="p-3 border-b border-gray-400 max-w-[150px] truncate">EMAIL</th>
                            <th class="p-3 border-b border-gray-400 max-w-[150px] truncate hidden sm:table-cell">JOIN DATE</th>
                            <th class="p-3 border-b border-gray-400 max-w-[150px] truncate">ACTION</th>
                        </tr>
                    </thead>
                    <tbody id="customerTableBody">
                        <% data.forEach(user => { %>
                        <tr class="border-b border-gray-200 text-gray-700 hover:bg-gray-50" data-user-id="<%= user._id %>">
                            <td class="p-3 max-w-[150px] truncate text-sm sm:text-base"><%= user._id %></td>
                            <td class="p-3 font-medium max-w-[150px] break-words text-sm sm:text-base"><%= user.name %></td>
                            <td class="p-3 max-w-[150px] break-words text-sm sm:text-base"><%= user.email %></td>
                            <td class="p-3 max-w-[150px] truncate text-sm sm:text-base hidden sm:table-cell"><%= user.createdOn %></td>
                            <td class="p-3 flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-2">
                                <button 
                                    class="toggle-block-btn bg-gradient-to-b <%= user.isBlocked ? 'from-green-500 to-green-600' : 'from-orange-400 to-orange-500' %> text-white px-4 py-1 rounded shadow hover:shadow-md transition-all text-sm sm:text-base"
                                    onclick="confirmBlock('<%= user._id %>', <%= user.isBlocked %>)">
                                    <%= user.isBlocked ? 'UNBLOCK' : 'BLOCK' %>
                                </button>
                                <button 
                                    class="bg-gradient-to-b from-red-500 to-red-600 text-white px-4 py-1 rounded shadow hover:shadow-md transition-all text-sm sm:text-base"
                                    onclick="confirmDelete('<%= user._id %>')">
                                    DELETE
                                </button>
                            </td>
                        </tr>
                        <% }) %>
                    </tbody>
                </table>
            </div>
            <div class="w-full max-w-full px-4 py-6 mx-auto">
                <nav aria-label="Page navigation">
                    <ul class="flex flex-wrap items-center justify-center gap-1" id="paginationContainer">
                        <% totalPage.forEach((_, i) => { %>
                        <li>
                            <a 
                                href="#" 
                                class="pagination-link flex h-8 w-8 sm:h-10 sm:w-10 items-center justify-center rounded-full border <%= i === currentPage ? 'border-yellow-500 bg-gradient-to-b from-yellow-400 to-yellow-500 text-black font-bold shadow-inner' : 'border-gray-300 bg-gradient-to-b from-gray-100 to-gray-200 hover:from-gray-200 hover:to-gray-300 text-gray-800 shadow' %> transition-all text-sm sm:text-base"
                                data-page="<%= i + 1 %>"
                                <%= i === currentPage ? 'aria-current="page"' : '' %>
                            >
                                <%= i + 1 %>
                            </a>
                        </li>
                        <% }) %>
                    </ul>
                </nav>
            </div>
        </div>
    </div>
</main>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
async function loadCustomers(page, searchQuery = '') {
    try {
        const response = await fetch(`/admin/users?page=${page}&search=${encodeURIComponent(searchQuery)}`, {
            headers: {
                'X-Requested-With': 'XMLHttpRequest'
            }
        });
        const data = await response.json();

        if (response.ok) {
            updateCustomerTable(data.users);
            updatePagination(data.currentPage, data.totalPage);
        } else {
            await Swal.fire({
                icon: 'error',
                title: 'Error',
                text: data.error || 'Failed to load customers',
                confirmButtonText: 'OK',
                background: '#f9fafb'
            }).then(() => {
                window.location.href = '/admin/pageerror?statusCode=500';
            });
        }
    } catch (error) {
        await Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'An error occurred while loading customers',
            confirmButtonText: 'OK',
            background: '#f9fafb'
        }).then(() => {
            window.location.href = '/admin/pageerror?statusCode=500';
        });
        console.error('Error loading customers:', error);
    }
}

function updateCustomerTable(users) {
    const tbody = document.getElementById('customerTableBody');
    tbody.innerHTML = '';
    users.forEach(user => {
        const row = document.createElement('tr');
        row.setAttribute('data-user-id', user._id);
        row.className = 'border-b border-gray-200 text-gray-700 hover:bg-gray-50';
        row.innerHTML = `
            <td class="p-3 max-w-[150px] truncate text-sm sm:text-base">${user._id}</td>
            <td class="p-3 font-medium max-w-[150px] break-words text-sm sm:text-base">${user.name}</td>
            <td class="p-3 max-w-[150px] break-words text-sm sm:text-base">${user.email}</td>
            <td class="p-3 max-w-[150px] truncate text-sm sm:text-base hidden sm:table-cell">${user.createdOn}</td>
            <td class="p-3 flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-2">
                <button 
                    class="toggle-block-btn bg-gradient-to-b ${user.isBlocked ? 'from-green-500 to-green-600' : 'from-orange-400 to-orange-500'} text-white px-4 py-1 rounded shadow hover:shadow-md transition-all text-sm sm:text-base"
                    onclick="confirmBlock('${user._id}', ${user.isBlocked})">
                    ${user.isBlocked ? 'UNBLOCK' : 'BLOCK'}
                </button>
                <button 
                    class="bg-gradient-to-b from-red-500 to-red-600 text-white px-4 py-1 rounded shadow hover:shadow-md transition-all text-sm sm:text-base"
                    onclick="confirmDelete('${user._id}')">
                    DELETE
                </button>
            </td>
        `;
        tbody.appendChild(row);
    });
}

function updatePagination(currentPage, totalPage) {
    const container = document.getElementById('paginationContainer');
    container.innerHTML = '';
    for (let i = 1; i <= totalPage; i++) {
        const li = document.createElement('li');
        li.innerHTML = `
            <a 
                href="#" 
                class="pagination-link flex h-8 w-8 sm:h-10 sm:w-10 items-center justify-center rounded-full border ${i === currentPage ? 'border-yellow-500 bg-gradient-to-b from-yellow-400 to-yellow-500 text-black font-bold shadow-inner' : 'border-gray-300 bg-gradient-to-b from-gray-100 to-gray-200 hover:from-gray-200 hover:to-gray-300 text-gray-800 shadow'} transition-all text-sm sm:text-base"
                data-page="${i}"
                ${i === currentPage ? 'aria-current="page"' : ''}
            >
                ${i}
            </a>
        `;
        container.appendChild(li);
    }

    document.querySelectorAll('.pagination-link').forEach(link => {
        link.addEventListener('click', (e) => {
            e.preventDefault();
            const page = parseInt(e.target.getAttribute('data-page'));
            loadCustomers(page, document.getElementById('searchInput').value);
        });
    });
}

async function confirmDelete(userId) {
    try {
        const result = await Swal.fire({
            toast: true,
            title: 'Are you sure?',
            text: 'This customer will be permanently deleted.',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#e3342f',
            cancelButtonColor: '#6c757d',
            confirmButtonText: 'Yes, delete it!',
            background: '#f9fafb'
        });

        if (!result.isConfirmed) return;

        const response = await fetch('/admin/deleteCustomer', {
            method: 'DELETE',
            headers: {
                'content-type': 'application/json'
            },
            body: JSON.stringify({ id: userId })
        });

        const data = await response.json();
        if (response.ok && data.status) {
            await Swal.fire({
                toast: true,
                icon: 'success',
                title: 'Customer Deleted',
                text: 'The customer has been deleted',
                showConfirmButton: false,
                timer: 3000,
                background: '#f9fafb',
                iconColor: '#00ff00'
            }).then(() => loadCustomers(getCurrentPage(), document.getElementById('searchInput').value));
        } else {
            await Swal.fire({
                icon: 'error',
                title: 'Error',
                text: data.message || 'Failed to delete customer',
                confirmButtonText: 'OK',
                background: '#f9fafb'
            });
        }
    } catch (error) {
        await Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'An error occurred while deleting the customer',
            confirmButtonText: 'OK',
            background: '#f9fafb'
        }).then(() => {
            window.location.href = '/admin/pageerror?statusCode=500';
        });
        console.error('Error deleting customer:', error);
    }
}

async function confirmBlock(userId, isBlocked) {
    try {
        const action = isBlocked ? 'unblock' : 'block';
        const actionText = isBlocked ? 'unblocked' : 'blocked';
        const result = await Swal.fire({
            toast: true,
            title: `Are you sure you want to ${action} this user?`,
            text: `The user will be ${actionText}.`,
            icon: 'question',
            showCancelButton: true,
            confirmButtonColor: isBlocked ? '#16a34a' : '#f97316',
            cancelButtonColor: '#6c757d',
            confirmButtonText: `Yes, ${action}`,
            background: '#f9fafb'
        });

        if (!result.isConfirmed) return;

        const response = await fetch('/admin/blockandUnblock', {
            method: 'PATCH',
            headers: {
                'content-type': 'application/json'
            },
            body: JSON.stringify({ id: userId })
        });

        const data = await response.json();
        if (response.ok && data.status) {
            await Swal.fire({
                toast: true,
                icon: 'success',
                title: `Customer ${actionText.charAt(0).toUpperCase() + actionText.slice(1)}`,
                text: `The customer has been ${actionText}`,
                showConfirmButton: false,
                timer: 3000,
                background: '#f9fafb',
                iconColor: '#00ff00'
            }).then(() => loadCustomers(getCurrentPage(), document.getElementById('searchInput').value));
        } else {
            await Swal.fire({
                icon: 'error',
                title: 'Error',
                text: data.message || `Failed to ${action} customer`,
                confirmButtonText: 'OK',
                background: '#f9fafb'
            });
        }
    } catch (error) {
        await Swal.fire({
            icon: 'error',
            title: 'Error',
            text: `An error occurred while ${isBlocked ? 'unblocking' : 'blocking'} the customer`,
            confirmButtonText: 'OK',
            background: '#f9fafb'
        }).then(() => {
            window.location.href = '/admin/pageerror?statusCode=500';
        });
        console.error(`Error ${isBlocked ? 'unblocking' : 'blocking'} customer:`, error);
    }
}

function getCurrentPage() {
    const currentPageElement = document.querySelector('.pagination-link[aria-current="page"]');
    return currentPageElement ? parseInt(currentPageElement.getAttribute('data-page')) : 1;
}

document.getElementById('searchButton').addEventListener('click', () => {
    loadCustomers(1, document.getElementById('searchInput').value);
});

document.querySelectorAll('.pagination-link').forEach(link => {
    link.addEventListener('click', (e) => {
        e.preventDefault();
        const page = parseInt(e.target.getAttribute('data-page'));
        loadCustomers(page, document.getElementById('searchInput').value);
    });
});

// Load initial data
loadCustomers(<%= currentPage + 1 %>, '<%= searchQuery || '' %>');
</script>

<%- include('../../views/partials/admin/footer') %>