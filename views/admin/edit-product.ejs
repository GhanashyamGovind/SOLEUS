<%- include('../../views/partials/admin/header', {title: 'Edit Products'}) %>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs@1.5.12/dist/cropper.min.css" />
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">

<main class="flex-1 p-4 md:p-6 bg-white text-black">
  <h2 class="text-2xl md:text-3xl font-bold mb-6">EDIT ITEMS</h2>

  <!-- Display Server-Side Error Messages -->
  <% if (error && error.length > 0) { %>
    <div class="text-red-500 mb-4">
      <% error.forEach(msg => { %>
        <p><%= msg %></p>
      <% }) %>
    </div>
  <% } %>

  <!-- Display Server-Side Success Messages (if needed) -->
  <% if (success && success.length > 0) { %>
    <div class="text-green-500 mb-4">
      <% success.forEach(msg => { %>
        <p><%= msg %></p>
      <% }) %>
    </div>
  <% } %>

  <!-- Client-Side Error Message Placeholder -->
  <div id="error-message" class="hidden text-red-500 mb-4"></div>

  <% if (product) { %>
    <form action="/admin/editProduct/<%= product._id %>" method="POST" enctype="multipart/form-data" class="space-y-6" id="add-product-form">
      <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <label for="productName" class="block text-sm font-medium text-gray-700 mb-1">PRODUCT NAME</label>
          <input type="text" id="productName" name="productName" value="<%= product.productName %>" required
            class="w-full border border-gray-300 rounded-lg p-2 focus:outline-none focus:ring-2 focus:ring-yellow-400">
          <div id="productName-error" class="error-message text-red-500 text-sm mt-1" style="display: none;"></div>
        </div>
        <div>
          <label for="productDescription" class="block text-sm font-medium text-gray-700 mb-1">PRODUCT DESCRIPTION</label>
          <textarea id="descriptionid" name="description" rows="3"
            class="w-full border border-gray-300 rounded-lg p-2 focus:outline-none focus:ring-2 focus:ring-yellow-400"><%= product.description %></textarea>
          <div id="description-error" class="error-message text-red-500 text-sm mt-1" style="display: none;"></div>
        </div>
      </div>

      <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <label for="brand" class="block text-sm font-medium text-gray-700 mb-1">BRAND</label>
          <select id="brand" name="brand" required
            class="w-full border border-gray-300 rounded-lg p-2 focus:outline-none focus:ring-2 focus:ring-yellow-400">
            <option value="<%= product.brand._id %>" selected><%= product.brand.brandName %></option>
            <% for (let i = 0; i < brand.length; i++) { %>
              <% if (brand[i]._id.toString() !== product.brand._id.toString()) { %>
                <option value="<%= brand[i]._id %>">
                  <%= brand[i].brandName %>
                </option>
              <% } %>
            <% } %>
          </select>
          <div id="brand-error" class="error-message text-red-500 text-sm mt-1" style="display: none;"></div>
        </div>
        <div>
          <label for="category" class="block text-sm font-medium text-gray-700 mb-1">CATEGORY</label>
          <select id="category" name="category" required
            class="w-full border border-gray-300 rounded-lg p-2 focus:outline-none focus:ring-2 focus:ring-yellow-400">
            <option value="" disabled>--SELECT--</option>
            <% for (let i = 0; i < cat.length; i++) { %>
              <option value="<%= cat[i]._id %>" <%= product.category._id.toString() === cat[i]._id.toString() ? 'selected' : '' %>>
                <%= cat[i].name %>
              </option>
            <% } %>
          </select>
          <div id="category-error" class="error-message text-red-500 text-sm mt-1" style="display: none;"></div>
        </div>
      </div>

      <div>
        <label class="block text-sm font-medium text-gray-700 mb-1">PRODUCT SIZES</label>
        <div class="flex flex-wrap gap-2" id="size-container">
          <% ['6', '7', '8', '9', '10', '11', '12'].forEach(size => { %>
            <div class="size-field flex flex-col gap-2">
              <label class="inline-flex items-center">
                <input type="checkbox" name="sizes" value="<%= size %>" class="form-checkbox h-5 w-5 text-yellow-400 size-checkbox"
                  <%= product.variants.some(v => v.size === size) ? 'checked' : '' %>
                  onchange="toggleSizeFields(this, '<%= size %>')">
                <span class="ml-2"><%= size %></span>
              </label>
              <div class="size-details <%= product.variants.some(v => v.size === size) ? '' : 'hidden' %>" id="size-details-<%= size %>">
                <input type="number" name="regularPrice-<%= size %>"
                  value="<%= product.variants.find(v => v.size === size)?.regularPrice || '' %>"
                  placeholder="Regular Price" step="0.01" min="0"
                  class="w-24 border border-gray-300 rounded-lg p-1 text-sm">
                <input type="number" name="salePrice-<%= size %>"
                  value="<%= product.variants.find(v => v.size === size)?.salePrice || '' %>"
                  placeholder="Sale Price" step="0.01" min="0"
                  class="w-24 border border-gray-300 rounded-lg p-1 text-sm">
                <input type="number" name="stock-<%= size %>"
                  value="<%= product.variants.find(v => v.size === size)?.stock || '' %>"
                  placeholder="Stock" min="0"
                  class="w-24 border border-gray-300 rounded-lg p-1 text-sm">
              </div>
            </div>
          <% }) %>
        </div>
        <div id="sizes-error" class="error-message text-red-500 text-sm mt-1" style="display: none;"></div>
      </div>

      <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <label for="color" class="block text-sm font-medium text-gray-700 mb-1">COLOUR</label>
          <input type="text" id="colour" value="<%= product.color %>" name="color"
            class="w-full border border-gray-300 rounded-lg p-2 focus:outline-none focus:ring-2 focus:ring-yellow-400">
          <div id="color-error" class="error-message text-red-500 text-sm mt-1" style="display: none;"></div>
        </div>
      </div>

      <div>
        <label class="block text-sm font-medium text-gray-家族 mb-1">UPLOAD IMAGE</label>
        <div class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-4">
          <% for (let i = 1; i <= 4; i++) { %>
            <div class="flex flex-col items-center gap-2 mb-5">
              <% if (product.productImage[i - 1]) { %>
                <img src="/Uploads/re-image/<%= product.productImage[i - 1] %>" alt="Existing Image" id="existingImg<%= i %>" class="w-32 h-32 object-contain rounded border mt-2" style="max-width: 128px; max-height: 128px;">
                <div class="flex gap-2" id="buttonContainer<%= i %>">
                  <button type="button" onclick="handleImageCrop('<%= i %>', true)" class="bg-yellow-500 text-white text-sm px-4 py-1 rounded hover:bg-yellow-600 transition">Re-Crop</button>
                  <button type="button" onclick="deleteImage('<%= i %>')" class="bg-red-500 text-white text-sm px-4 py-1 rounded hover:bg-red-600 transition" id="deleteButton<%= i %>">Delete</button>
                </div>
              <% } else { %>
                <div class="w-32 h-32 rounded border mt-2 bg-gray-100 flex items-center justify-center text-gray-500" style="max-width: 128px; max-height: 128px;" id="noImage<%= i %>">No Image</div>
                <div class="flex gap-2" id="buttonContainer<%= i %>" style="display: none;">
                  <button type="button" onclick="handleImageCrop('<%= i %>', true)" class="bg-yellow-500 text-white text-sm px-4 py-1 rounded hover:bg-yellow-600 transition">Re-Crop</button>
                  <button type="button" onclick="deleteImage('<%= i %>')" class="bg-red-500 text-white text-sm px-4 py-1 rounded hover:bg-red-600 transition" id="deleteButton<%= i %>">Delete</button>
                </div>
              <% } %>
              <div class="w-full">
                <input type="file" name="images" id="input<%= i %>" accept="image/*" onchange="handleImageCrop('<%= i %>', false, event)"
                  class="block w-full text-sm text-gray-700 file:bg-blue-600 file:text-white file:py-2 file:px-4 file:rounded file:border-0 file:cursor-pointer hover:file:bg-blue-700">
                <input type="hidden" name="deleteImages" id="deleteImage<%= i %>" value="">
              </div>
              <img src="" alt="Preview" id="imgView<%= i %>" class="w-32 h-32 object-contain rounded border mt-2" style="display: none; max-width: 128px; max-height: 128px;">
              <span id="status<%= i %>" class="text-sm text-gray-600">No image selected</span>
              <div id="imageCropper<%= i %>" class="hidden flex-col items-center" style="width: 400px; height: 400px; border: 1px solid #ccc; padding: 10px;">
                <img src="" id="cropperImg<%= i %>" alt="Crop Preview" class="w-full h-full object-contain">
                <div class="flex gap-2 mt-2">
                  <button type="button" id="saveButton<%= i %>" class="bg-blue-600 text-white text-sm px-4 py-1 rounded hover:bg-blue-700 transition">Crop & Save</button>
                  <button type="button" id="cancelButton<%= i %>" class="bg-gray-600 text-white text-sm px-4 py-1 rounded hover:bg-gray-700 transition">Cancel</button>
                </div>
              </div>
            </div>
          <% } %>
        </div>
        <div id="images-error" class="error-message text-red-500 text-sm mt-1" style="display: none;"></div>
      </div>

      <div class="flex justify-center">
        <button type="button" onclick="validateAndSubmit()" class="bg-gray-700 hover:bg-gray-800 text-white px-6 py-2 rounded-lg">UPDATE</button>
      </div>
    </form>
  <% } else { %>
    <p class="text-red-500">Unable to load product data. Please try again or return to the <a href="/admin/productlist" class="underline">product list</a>.</p>
  <% } %>
</main>

<script src="https://cdn.jsdelivr.net/npm/cropperjs@1.5.12/dist/cropper.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
  let croppers = {};
  let imageStatus = { 1: { cropped: false, edited: false }, 2: { cropped: false, edited: false }, 3: { cropped: false, edited: false }, 4: { cropped: false, edited: false } };

  window.addEventListener('load', () => {
    console.log('Page loaded');
    if (typeof Cropper === 'undefined') {
      console.error('Cropper.js not loaded');
      displayErrorMessage('images-error', 'Image cropping library failed to load. Please try again later.');
    }
    if (typeof Swal === 'undefined') {
      console.error('SweetAlert2 not loaded');
      displayErrorMessage('error-message', 'Notification library failed to load. Please try again later.');
    }
  });

  function toggleSizeFields(checkbox, size) {
    const detailsDiv = document.getElementById(`size-details-${size}`);
    if (checkbox.checked) {
      detailsDiv.classList.remove('hidden');
    } else {
      detailsDiv.classList.add('hidden');
      detailsDiv.querySelectorAll('input').forEach(input => input.value = '');
    }
  }

  function validateAndSubmit() {
    console.log('Update button clicked');
    if (validateForm()) {
      const form = document.getElementById('add-product-form');
      const formData = new FormData(form);
      console.log('Form data:', Array.from(formData.entries()));
      fetch(form.action, {
        method: 'POST',
        body: formData
      })
      .then(response => {
        console.log('Fetch response:', response.status, response.statusText);
        if (!response.ok) {
          throw new Error(`HTTP error! Status: ${response.status}`);
        }
        return response.json();
      })
      .then(data => {
        console.log('Response data:', data);
        if (data.error) {
          displayErrorMessage('error-message', data.error);
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: data.error,
            confirmButtonColor: '#d33'
          });
        } else {
          Swal.fire({
            icon: 'success',
            title: 'Success',
            text: 'Product updated successfully!',
            confirmButtonColor: '#3085d6'
          }).then(() => {
            window.location.replace('/admin/productlist');
          });
        }
      })
      .catch(error => {
        console.error('Fetch error:', error);
        displayErrorMessage('error-message', 'Failed to submit form. Please try again.');
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: 'Failed to submit form. Please try again.',
          confirmButtonColor: '#d33'
        });
      });
    } else {
      console.log('Form validation failed');
      Swal.fire({
        icon: 'warning',
        title: 'Validation Failed',
        text: 'Please fix the errors in the form before submitting.',
        confirmButtonColor: '#f39c12'
      });
    }
  }

  function deleteImage(i) {
    console.log(`Deleting image ${i}`);
    const existingImg = document.getElementById(`existingImg${i}`);
    const imgView = document.getElementById(`imgView${i}`);
    const input = document.getElementById(`input${i}`);
    const status = document.getElementById(`status${i}`);
    const deleteInput = document.getElementById(`deleteImage${i}`);
    const cropperContainer = document.getElementById(`imageCropper${i}`);
    const buttonContainer = document.getElementById(`buttonContainer${i}`);
    const noImageDiv = document.getElementById(`noImage${i}`);

    if (existingImg) {
      deleteInput.value = existingImg.src.split('/').pop();
      existingImg.src = '';
      existingImg.style.display = 'none';
      existingImg.replaceWith(existingImg.cloneNode(true));
    }

    if (noImageDiv) {
      noImageDiv.style.display = 'flex';
    } else {
      const newNoImageDiv = document.createElement('div');
      newNoImageDiv.id = `noImage${i}`;
      newNoImageDiv.className = 'w-32 h-32 rounded border mt-2 bg-gray-100 flex items-center justify-center text-gray-500';
      newNoImageDiv.style.cssText = 'max-width: 128px; max-height: 128px;';
      newNoImageDiv.textContent = 'No Image';
      buttonContainer.insertAdjacentElement('beforebegin', newNoImageDiv);
    }

    buttonContainer.style.display = 'none';
    input.value = '';
    imgView.src = '';
    imgView.style.display = 'none';
    status.textContent = 'No image selected';
    status.classList.remove('text-yellow-600', 'text-green-600', 'text-red-600');
    status.classList.add('text-gray-600');
    cropperContainer.classList.add('hidden');
    imageStatus[i].cropped = false;
    imageStatus[i].edited = false;

    if (croppers[i]) {
      croppers[i].destroy();
      delete croppers[i];
    }
  }

  function handleImageCrop(i, isEdit, event) {
    console.log(`handleImageCrop called: i=${i}, isEdit=${isEdit}`);
    const input = document.getElementById(`input${i}`);
    const cropperContainer = document.getElementById(`imageCropper${i}`);
    const cropperImg = document.getElementById(`cropperImg${i}`);
    const saveButton = document.getElementById(`saveButton${i}`);
    const cancelButton = document.getElementById(`cancelButton${i}`);
    const imgView = document.getElementById(`imgView${i}`);
    const status = document.getElementById(`status${i}`);
    let existingImg = document.getElementById(`existingImg${i}`);
    const deleteInput = document.getElementById(`deleteImage${i}`);
    const buttonContainer = document.getElementById(`buttonContainer${i}`);
    const noImageDiv = document.getElementById(`noImage${i}`);

    if (croppers[i]) {
      console.log(`Destroying previous cropper for slot ${i}`);
      croppers[i].destroy();
      delete croppers[i];
    }

    if (!isEdit && existingImg && existingImg.src && !deleteInput.value) {
      console.log(`Marking existing image for deletion in slot ${i}`);
      deleteInput.value = existingImg.src.split('/').pop();
      existingImg.src = '';
      existingImg.style.display = 'none';
      existingImg.replaceWith(existingImg.cloneNode(true));
      existingImg = document.getElementById(`existingImg${i}`);
    }

    let imageSrc;
    if (isEdit) {
      console.log(`Re-cropping image in slot ${i}`);
      if (!existingImg || !existingImg.src || existingImg.src === window.location.href) {
        console.error(`No existing image to re-crop in slot ${i}`);
        displayErrorMessage('images-error', 'No existing image to re-crop.');
        return;
      }
      imageSrc = existingImg.src;
      deleteInput.value = existingImg.src.split('/').pop();
    } else {
      const file = event.target.files[0];
      if (!file) {
        console.warn(`No file selected in slot ${i}`);
        resetImageState(i, input, imgView, status, cropperContainer, buttonContainer, noImageDiv);
        return;
      }
      console.log(`New image selected in slot ${i}: ${file.name}`);
      imageSrc = URL.createObjectURL(file);
    }

    imgView.src = imageSrc;
    imgView.style.display = 'block';
    status.textContent = isEdit ? 'Re-cropping existing image (not cropped)' : 'Image selected (not cropped)';
    status.classList.remove('text-green-600', 'text-red-600');
    status.classList.add('text-yellow-600');
    cropperImg.src = imageSrc;
    cropperContainer.classList.remove('hidden');
    buttonContainer.style.display = 'flex';
    if (noImageDiv) {
      noImageDiv.style.display = 'none';
    }

    console.log(`Initializing Cropper.js for slot ${i}`);
    croppers[i] = new Cropper(cropperImg, {
      aspectRatio: 1,
      viewMode: 1,
      guides: true,
      background: false,
      autoCropArea: 0.8,
      zoomable: true,
      ready: function () {
        console.log(`Cropper.js ready for slot ${i}`);
        this.cropper.crop();
      },
      crop: function () {
        console.log(`Cropper.js crop event triggered for slot ${i}`);
      }
    });

    saveButton.onclick = () => {
      console.log(`Saving cropped image for slot ${i}`);
      const croppedCanvas = croppers[i].getCroppedCanvas({ width: 440, height: 440 });
      if (!croppedCanvas) {
        console.error(`Failed to get cropped canvas for slot ${i}`);
        status.textContent = 'Failed to crop image';
        status.classList.remove('text-yellow-600');
        status.classList.add('text-red-600');
        displayErrorMessage('images-error', 'Failed to crop the image. Please try again.');
        return;
      }

      const croppedDataUrl = croppedCanvas.toDataURL('image/jpeg', 1.0);
      imgView.src = croppedDataUrl;
      imgView.style.display = 'block';
      status.textContent = 'Image cropped';
      status.classList.remove('text-yellow-600');
      status.classList.add('text-green-600');

      if (!existingImg || !existingImg.src) {
        console.log(`Creating new existingImg for slot ${i}`);
        const newExistingImg = document.createElement('img');
        newExistingImg.id = `existingImg${i}`;
        newExistingImg.className = 'w-32 h-32 object-contain rounded border mt-2';
        newExistingImg.style.cssText = 'max-width: 128px; max-height: 128px;';
        newExistingImg.alt = 'Existing Image';
        buttonContainer.insertAdjacentElement('beforebegin', newExistingImg);
        existingImg = newExistingImg;
      }
      existingImg.src = croppedDataUrl;
      existingImg.style.display = 'block';

      croppedCanvas.toBlob(blob => {
        if (!blob) {
          console.error(`Failed to create blob for slot ${i}`);
          status.textContent = 'Failed to process cropped image';
          status.classList.remove('text-yellow-600');
          status.classList.add('text-red-600');
          displayErrorMessage('images-error', 'Failed to process the cropped image.');
          return;
        }
        try {
          const fileName = `cropped-img-${Date.now()}-${i}.jpeg`;
          const croppedFile = new File([blob], fileName, { type: 'image/jpeg' });
          const fileList = new DataTransfer();
          fileList.items.add(croppedFile);
          input.files = fileList.files;
          console.log(`Cropped image saved to input for slot ${i}: ${fileName}`);
          imageStatus[i].cropped = !isEdit;
          imageStatus[i].edited = isEdit;
          buttonContainer.style.display = 'flex';
        } catch (err) {
          console.error(`Failed to assign cropped file for slot ${i}:`, err);
          displayErrorMessage('images-error', 'Failed to process the cropped image.');
        }
      }, 'image/jpeg', 1.0);

      cropperContainer.classList.add('hidden');
      croppers[i].destroy();
      delete croppers[i];
    };

    cancelButton.onclick = () => {
      console.log(`Cancel cropping for slot ${i}`);
      cropperContainer.classList.add('hidden');
      imgView.src = '';
      imgView.style.display = 'none';
      status.textContent = 'No image selected';
      status.classList.remove('text-yellow-600', 'text-green-600', 'text-red-600');
      status.classList.add('text-gray-600');
      if (!isEdit) input.value = '';
      if (croppers[i]) {
        croppers[i].destroy();
        delete croppers[i];
      }
      if (!existingImg || !existingImg.src || existingImg.src === window.location.href) {
        if (noImageDiv) noImageDiv.style.display = 'flex';
        buttonContainer.style.display = 'none';
      } else {
        imgView.src = existingImg.src;
        imgView.style.display = 'block';
      }
    };
  }

  function resetImageState(i, input, imgView, status, cropperContainer, buttonContainer, noImageDiv) {
    console.log(`Resetting image state for slot ${i}`);
    cropperContainer.classList.add('hidden');
    input.value = '';
    imgView.src = '';
    imgView.style.display = 'none';
    status.textContent = 'No image selected';
    status.classList.remove('text-yellow-600', 'text-green-600', 'text-red-600');
    status.classList.add('text-gray-600');
    if (noImageDiv) noImageDiv.style.display = 'flex';
    buttonContainer.style.display = 'none';
  }

  function validateForm() {
    clearErrorMessages();
    const fields = {
      productName: document.getElementsByName('productName')[0].value.trim(),
      description: document.getElementById('descriptionid').value.trim(),
      brand: document.getElementsByName('brand')[0].value,
      category: document.getElementsByName('category')[0].value,
      color: document.getElementsByName('color')[0].value.trim(),
      sizes: document.getElementsByName('sizes')
    };
    const images = document.querySelectorAll('input[name="images"]');
    let isValid = true;
    console.log('Validating form:', fields);

    if (!fields.productName) {
      console.log('Product name validation failed');
      displayErrorMessage('productName-error', 'Please enter a product name.');
      isValid = false;
    } else if (!/^[a-zA-Z0-9\s]+$/.test(fields.productName)) {
      console.log('Product name format validation failed');
      displayErrorMessage('productName-error', 'Product name should contain only alphabetic characters and numbers.');
      isValid = false;
    }

    if (!fields.description) {
      console.log('Description validation failed');
      displayErrorMessage('description-error', 'Please enter a product description.');
      isValid = false;
    } else if (!/^[a-zA-Z0-9\s!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]+$/.test(fields.description)) {
      console.log('Description format validation failed');
      displayErrorMessage('description-error', 'Product description should contain only allowed characters.');
      isValid = false;
    }

    if (!fields.brand) {
      console.log('Brand validation failed');
      displayErrorMessage('brand-error', 'Please select a brand.');
      isValid = false;
    }

    if (!fields.category) {
      console.log('Category validation failed');
      displayErrorMessage('category-error', 'Please select a category.');
      isValid = false;
    }

    if (!fields.color) {
      console.log('Color validation failed');
      displayErrorMessage('color-error', 'Please enter a color.');
      isValid = false;
    }

    const selectedSizes = Array.from(fields.sizes).filter(size => size.checked).map(size => size.value);
    if (selectedSizes.length === 0) {
      console.log('Sizes validation failed');
      displayErrorMessage('sizes-error', 'Please select at least one size.');
      isValid = false;
    } else {
      let totalStock = 0;
      selectedSizes.forEach(size => {
        const regularPrice = document.getElementsByName(`regularPrice-${size}`)[0].value;
        const salePrice = document.getElementsByName(`salePrice-${size}`)[0].value;
        const stock = document.getElementsByName(`stock-${size}`)[0].value;

        if (!regularPrice || parseFloat(regularPrice) <= 0) {
          console.log(`Regular price validation failed for size ${size}`);
          displayErrorMessage('sizes-error', `Please enter a valid regular price for size ${size}.`);
          isValid = false;
        }
        if (salePrice && parseFloat(salePrice) < 0) {
          console.log(`Sale price validation failed for size ${size}`);
          displayErrorMessage('sizes-error', `Sale price for size ${size} cannot be negative.`);
          isValid = false;
        }
        if (regularPrice && salePrice && parseFloat(regularPrice) <= parseFloat(salePrice)) {
          console.log(`Price comparison validation failed for size ${size}`);
          displayErrorMessage('sizes-error', `Regular price must be greater than sale price for size ${size}.`);
          isValid = false;
        }
        if (!stock || parseInt(stock) <= 0) {
          console.log(`Stock validation failed for size ${size}`);
          displayErrorMessage('sizes-error', `Please enter a valid stock quantity for size ${size}.`);
          isValid = false;
        } else {
          totalStock += parseInt(stock);
        }
      });
      if (totalStock === 0) {
        console.log('Total stock validation failed');
        displayErrorMessage('sizes-error', 'Total stock quantity must be greater than zero.');
        isValid = false;
      }
    }

    let hasImage = false;
    images.forEach((input, idx) => {
      const i = idx + 1;
      const existingImg = document.getElementById(`existingImg${i}`);
      const deleteInput = document.getElementById(`deleteImage${i}`);
      if (input.files.length > 0) {
        if (imageStatus[i].cropped || imageStatus[i].edited) {
          console.log(`Image ${i} is cropped or edited`);
          hasImage = true;
        } else {
          console.log(`Image ${i} not cropped`);
          displayErrorMessage('images-error', `Please crop the image for input ${i} before submitting.`);
          isValid = false;
        }
      } else if (existingImg?.src && existingImg.src !== window.location.href && !deleteInput.value) {
        console.log(`Existing image ${i} retained`);
        hasImage = true;
      }
    });
    if (!hasImage) {
      console.log('No valid images found');
      displayErrorMessage('images-error', 'Please select, crop, or retain at least one image.');
      isValid = false;
    }

    console.log('Validation result:', isValid);
    return isValid;
  }

  function displayErrorMessage(elementId, message) {
    console.log(`Displaying error: ${elementId} - ${message}`);
    let errorElement = document.getElementById(elementId);
    if (!errorElement) {
      errorElement = document.createElement('div');
      errorElement.id = elementId;
      errorElement.className = 'error-message text-red-500 text-sm mt-1';
      const inputElement = document.querySelector(`[name="${elementId.split('-')[0]}"]`) || document.querySelector(`#${elementId.split('-')[0]}`);
      if (inputElement) {
        inputElement.parentNode.appendChild(errorElement);
      } else {
        document.getElementById('error-message').innerText = message;
        document.getElementById('error-message').classList.remove('hidden');
        return;
      }
    }
    errorElement.innerText = message;
    errorElement.style.display = 'block';
  }

  function clearErrorMessages() {
    console.log('Clearing error messages');
    const errorElements = document.getElementsByClassName('error-message');
    Array.from(errorElements).forEach(element => {
      element.innerText = '';
      element.style.display = 'none';
    });
    document.getElementById('error-message').classList.add('hidden');
  }
</script>

<%- include('../../views/partials/admin/footer') %>