<%- include('../../views/partials/user/header', {title: 'Cart'}) %>

<!-- Main Content -->
<div class="main-content container mx-auto p-4 md:p-6 flex flex-col md:flex-row gap-6">
    <!-- Shopping Cart -->
    <div class="w-full md:w-2/3">
        <h2 class="text-2xl md:text-3xl font-bold mb-6 text-gray-800">SHOPPING CART</h2>
        <div class="bg-white shadow-md rounded-lg overflow-x-auto">
            <table class="w-full text-left border-collapse min-w-[600px]">
                <thead>
                    <tr class="bg-gray-200 text-gray-700">
                        <th class="p-4 font-semibold">Product List</th>
                        <th class="p-4 font-semibold">Quantity</th>
                        <th class="p-4 font-semibold">Total</th>
                        <th class="p-4 font-semibold">Size</th>
                        <th class="p-4 font-semibold">Action</th>
                    </tr>
                </thead>
                <tbody id="cartItems">
                    <% if (cart && cart.items && cart.items.length > 0) { %>
                        <% cart.items.forEach(item => { %>
                            <tr class="border-b hover:bg-gray-50">
                                <td class="p-4 flex items-center space-x-4">
                                    <% const productImage = item.productId && item.productId.productImage ? item.productId.productImage : 'https://via.placeholder.com/80?text=Shoes'; %>
                                    <% const productName = item.productId && item.productId.productName ? item.productId.productName : 'Product'; %>
                                    <img src="/Uploads/re-image/<%= productImage[0] %>" alt="<%= productName %>" class="w-20 h-20 object-cover rounded-md shadow-sm">
                                    <div>
                                        <% const displayName = item.productId && item.productId.productName ? item.productId.productName : 'Unknown Product'; %>
                                        <p class="font-bold text-gray-800"><%= displayName.toUpperCase() %></p>
                                        <p class="text-sm text-gray-500">SKU: <%= item.sku || 'N/A' %></p>
                                    </div>
                                </td>
                                <td class="p-4">
                                    <div class="flex items-center space-x-2">
                                        <button onclick="updateQuantity('<%= item.productId._id %>', '<%= item.size %>', '<%= item.sku %>', '<%= item.quantity - 1 %>')" class="bg-gray-300 text-black px-3 py-1 rounded hover:bg-gray-400 transition">-</button>
                                        <span class="text-gray-800 font-medium min-w-[2rem] text-center"><%= item.quantity %></span>
                                        <button onclick="updateQuantity('<%= item.productId._id %>', '<%= item.size %>', '<%= item.sku %>', '<%= item.quantity + 1 %>')" class="bg-gray-300 text-black px-3 py-1 rounded hover:bg-gray-400 transition">+</button>
                                    </div>
                                </td>
                                <td class="p-4 text-gray-800 font-medium">₹<%= (item.price * item.quantity).toFixed(2) %></td>
                                <td class="p-4 text-gray-800 font-medium"><%= item.size || 'N/A' %></td>
                                <td class="p-4">
                                    <button onclick="deleteItem('<%= item.productId._id %>', '<%= item.size %>', '<%= item.sku %>')" class="text-red-500 hover:text-red-700 transition">
                                        <svg class="w-5 h-5 text-gray-600 hover:text-red-600 transition" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                            <path stroke-linecap="round" stroke-linejoin="round" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6M9 7h6m-6 0V5a1 1 0 011-1h2a1 1 0 011 1v2m-4 0h4" />
                                        </svg>
                                    </button>
                                </td>
                            </tr>
                        <% }) %>
                    <% } else { %>
                        <tr>
                            <td colspan="5" class="p-4 text-center text-gray-500 text-lg">Your cart is empty</td>
                        </tr>
                    <% } %>
                </tbody>
            </table>
        </div>
    </div>

    <!-- Checkout Summary -->
    <div class="w-full md:w-1/3">
        <h2 class="text-2xl md:text-3xl font-bold mb-6 text-gray-800">ORDER SUMMARY</h2>
        <div class="bg-white shadow-md rounded-lg p-6">
            <div class="flex justify-between mb-4 text-gray-700">
                <p>Subtotal</p>
                <p>₹<%= cart && cart.totalPrice ? cart.totalPrice.toFixed(2) : '0.00' %></p>
            </div>
            <div class="flex justify-between mb-4 text-gray-700">
                <p>Delivery Charge</p>
                <p><%= cart && cart.totalPrice >= 2500 ? 'FREE' : '₹99.00' %></p>
            </div>
            <div class="flex justify-between font-bold text-lg border-t pt-4 text-gray-800">
                <p>TOTAL</p>
                <p>₹<%= cart ? (cart.totalPrice >= 2500 ? cart.totalPrice.toFixed(2) : (cart.totalPrice + 99).toFixed(2)) : '0.00' %></p>
            </div>
            <button onclick="proceedToCheckout()" class="w-full bg-green-500 text-white py-3 mt-6 rounded-lg hover:bg-green-600 transition-all duration-200 font-semibold">CHECK OUT</button>
        </div>
    </div>
</div>

<%- include('../../views/partials/user/footer') %>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
// Assume userId is available from the cart data
const userId = "<%= cart && cart.userId ? cart.userId : '' %>";
const cartItems = '<%- JSON.stringify(cart && cart.items ? cart.items : []) %>'

// Update quantity
async function updateQuantity(productId, size, sku, newQuantity) {
    if (newQuantity < 1) return;
    try {
        const response = await fetch('/cart/update', {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ userId, productId, size, sku, quantity: newQuantity })
        });

        const data = await response.json();
        if (response.status === 401) {
            Swal.fire({
                toast: true,
                position: 'top-end',
                icon: 'info',
                title: 'Login Required',
                text: 'Please login to update your cart',
                showConfirmButton: false,
                timer: 1500,
                timerProgressBar: true
            });
            return;
        }
        if (!response.ok) throw new Error(data.message || 'Failed to update cart');

        // Update the specific row
        const rows = document.querySelectorAll('#cartItems tr');
        for (const row of rows) {
            const buttons = row.querySelectorAll('button[onclick*="updateQuantity"]');
            if (buttons.length > 0) {
                const onclickAttr = buttons[0].getAttribute('onclick');
                const [_, rowProductId, rowSize, rowSku] = onclickAttr.match(/updateQuantity\('(.+?)', '(.+?)', '(.+?)'/);
                
                if (rowProductId === productId && rowSize === size && rowSku === sku) {
                    const quantitySpan = row.querySelector('td:nth-child(2) span');
                    quantitySpan.textContent = data.cartItem.quantity;
                    
                    const priceCell = row.querySelector('td:nth-child(3)');
                    priceCell.textContent = `₹${(data.cartItem.price * data.cartItem.quantity).toFixed(2)}`;
                    
                    const qtyButtons = row.querySelectorAll('td:nth-child(2) button');
                    qtyButtons[0].setAttribute('onclick', `updateQuantity('${productId}', '${size}', '${sku}', ${data.cartItem.quantity - 1})`);
                    qtyButtons[1].setAttribute('onclick', `updateQuantity('${productId}', '${size}', '${sku}', ${data.cartItem.quantity + 1})`);
                    break;
                }
            }
        }

        // Update order summary with proper selectors
        const subtotalElement = document.querySelector('.flex.justify-between.mb-4.text-gray-700:first-child p:last-child');
        const deliveryElement = document.querySelectorAll('.flex.justify-between.mb-4.text-gray-700')[1]?.querySelector('p:last-child');
        const grandTotalElement = document.querySelector('.flex.justify-between.font-bold.text-lg.border-t.pt-4.text-gray-800 p:last-child');
        
        if (subtotalElement && deliveryElement && grandTotalElement) {
            const subtotal = data.cart.totalPrice;
            const deliveryCharge = subtotal >= 2500 ? 0 : 99;
            const grandTotal = subtotal + deliveryCharge;

            subtotalElement.textContent = `₹${subtotal.toFixed(2)}`;
            deliveryElement.textContent = deliveryCharge === 0 ? 'FREE' : `₹${deliveryCharge.toFixed(2)}`;
            grandTotalElement.textContent = `₹${grandTotal.toFixed(2)}`;
        }

    } catch (error) {
        Swal.fire({
            toast: true,
            position: 'top-end',
            icon: 'warning',
            title: error.message.includes('Maximum') ? 'MAX LIMIT' : 'ERROR',
            text: error.message || 'Failed to update quantity',
            showConfirmButton: false,
            timer: 2000,
            timerProgressBar: true
        });
    }
}

// Delete item
async function deleteItem(productId, size, sku) {
    try {
        const result = await Swal.fire({
            toast: true,
            title: 'Are you sure?',
            text: 'Do you want to remove this item from your cart?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: 'Yes, remove it!',
            cancelButtonText: 'Cancel',
            position: 'center',
            timerProgressBar: true,
            background: '#000',
            color: '#fff',
        });

        if (!result.isConfirmed) {
            return;
        }

        const response = await fetch('/cart/remove', {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ productId, size, sku })
        });

        const data = await response.json();
        if (response.status === 401) {
            Swal.fire({
                toast: true,
                position: 'top-end',
                icon: 'info',
                title: 'Login Required',
                text: 'Please login to update your cart',
                showConfirmButton: false,
                timer: 1500,
                timerProgressBar: true
            });
            return;
        }
        if (!response.ok) throw new Error(data.message || 'Failed to remove item');

        Swal.fire({
            toast: true,
            position: 'top-end',
            icon: 'success',
            title: 'Item removed from cart',
            showConfirmButton: false,
            timer: 1500,
            timerProgressBar: true
        });
        setTimeout(() => window.location.reload(), 1500);
    } catch (error) {
        Swal.fire({
            toast: true,
            position: 'top-end',
            icon: 'error',
            title: 'Error',
            text: error.message || 'Failed to remove item',
            showConfirmButton: false,
            timer: 2000,
            timerProgressBar: true
        });
    }
}

// Proceed to checkout
function proceedToCheckout() {
    if (!userId) {
        Swal.fire({
            toast: true,
            position: 'top-end',
            icon: 'warning',
            title: 'Cart is empty',
            text: 'Add items to your cart before checking out',
            showConfirmButton: false,
            timer: 1500,
            timerProgressBar: true
        });
        return;
    }
    if (cartItems.length === 0) {
        Swal.fire({
            toast: true,
            position: 'top-end',
            icon: 'warning',
            title: 'Cart is empty',
            text: 'Add items to your cart before checking out',
            showConfirmButton: false,
            timer: 2000,
            timerProgressBar: true
        });
        return;
    }
    window.location.href = '/check-out';
}

const urlParams = new URLSearchParams(window.location.search);
const errorMessage = urlParams.get('error');

if(errorMessage){
   Swal.fire({
        toast: true,
        position: 'center',
        icon: 'warning',
        title: decodeURIComponent(errorMessage),
        showConfirmButton: true,
        confirmButtonText: 'OK',
        timer: undefined, // No auto close
        timerProgressBar: false
    });

    const cleanUrl = window.location.origin + window.location.pathname;
    window.history.replaceState({}, document.title, cleanUrl)
}

</script>

<style>
    html, body {
        height: 100%;
        margin: 0;
        padding: 0;
    }
    body {
        font-family: 'Quantico', sans-serif;
        display: flex;
        flex-direction: column;
        min-height: 100vh;
    }
    .main-content {
        flex: 1 0 auto;
    }
    footer {
        flex-shrink: 0;
    }
    table {
        border-collapse: collapse;
    }
    th, td {
        border: 1px solid #e5e7eb;
    }
    tr:hover {
        transition: background-color 0.2s ease;
    }
    button {
        transition: background-color 0.2s ease, transform 0.1s ease;
    }
    button:hover {
        transform: scale(1.05);
    }

    /* Responsive table styles */
    .overflow-x-auto {
        -webkit-overflow-scrolling: touch;
    }
    table {
        width: 100%;
        table-layout: auto;
    }
    th, td {
        padding: 1rem;
        white-space: nowrap; /* Prevent text wrapping */
    }
    th:first-child, td:first-child {
        min-width: 200px; /* Ensure product column has enough space */
    }
    th:nth-child(2), td:nth-child(2) {
        min-width: 120px; /* Quantity column */
    }
    th:nth-child(3), td:nth-child(3) {
        min-width: 100px; /* Total column */
    }
    th:nth-child(4), td:nth-child(4) {
        min-width: 80px; /* Size column */
    }
    th:nth-child(5), td:nth-child(5) {
        min-width: 80px; /* Action column */
    }

    /* Adjustments for smaller screens */
    @media (max-width: 768px) {
        .main-content {
            flex-direction: column;
            padding: 1rem;
        }
        table {
            min-width: 600px; /* Ensure table is wide enough to show all columns */
        }
        th, td {
            font-size: 0.875rem; /* Slightly smaller font on mobile */
            padding: 0.75rem;
        }
        .flex.items-center.space-x-2 {
            justify-content: center; /* Center quantity buttons */
        }
        button {
            padding: 0.5rem;
        }
        img.w-20.h-20 {
            width: 60px;
            height: 60px; /* Smaller images on mobile */
        }
    }

    @media (max-width: 640px) {
        th, td {
            font-size: 0.75rem;
            padding: 0.5rem;
        }
        .flex.items-center.space-x-2 {
            flex-wrap: wrap; /* Allow quantity buttons to wrap if needed */
            gap: 0.5rem;
        }
        button {
            padding: 0.4rem;
        }
        img.w-20.h-20 {
            width: 50px;
            height: 50px;
        }
    }
</style>