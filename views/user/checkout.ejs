<%- include('../../views/partials/user/header', {title: 'Check Out'}) %>
<body class="bg-white font-sans min-h-screen py-6 px-4 sm:px-6 lg:px-8 relative overflow-hidden">
    <!-- Background bubbles -->
    <div class="absolute inset-0 -z-10 overflow-hidden">
        <div class="absolute top-20 -left-20 w-80 h-80 bg-yellow-300 rounded-full opacity-20 mix-blend-multiply filter blur-xl"></div>
        <div class="absolute top-40 right-0 w-64 h-64 bg-black rounded-full opacity-10 mix-blend-multiply filter blur-xl"></div>
        <div class="absolute bottom-20 left-1/4 w-96 h-96 bg-yellow-400 rounded-full opacity-15 mix-blend-multiply filter blur-xl"></div>
        <div class="absolute bottom-0 right-20 w-72 h-72 bg-black rounded-full opacity-10 mix-blend-multiply filter blur-xl"></div>
    </div>

    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6 lg:py-12">
        <!-- Header -->
        <div class="text-center mb-8 lg:mb-12">
            <h1 class="text-2xl sm:text-3xl lg:text-4xl font-bold text-gray-900 tracking-wide">
                Check O<span class="text-gray-400">u</span>t Your Shoes
            </h1>
        </div>

        <!-- Main Content -->
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 lg:gap-12">
            <!-- Left Side: Address and Payment -->
            <div class="space-y-6">
                <!-- Address Section -->
                <div class="bg-white rounded-xl shadow-xl border border-gray-200 p-6">
                    <h2 class="text-lg font-semibold text-gray-900 mb-4 uppercase tracking-wide">Delivery Address</h2>
                    
                    <!-- Current Address -->
                    <% if (address && address.length > 0) { %>
                        <div class="space-y-4">
                            <% address.forEach((addr, index) => { %>
                                <div class="border border-gray-200 rounded-lg p-4 bg-gray-50">
                                    <label class="flex items-start cursor-pointer">
                                        <input type="radio" name="address" value="<%= addr._id %>" class="w-4 h-4 mt-1 text-blue-600 border-gray-300 focus:ring-blue-500" <%= index === 0 ? 'checked' : '' %>>
                                        <div class="ml-3 flex-1">
                                            <div class="flex items-center gap-2 mb-2">
                                                <span class="bg-green-100 text-green-800 text-xs font-medium px-2 py-1 rounded-full"><%= addr.addressType || 'Home' %></span>
                                            </div>
                                            <p class="text-sm font-medium text-gray-900 mb-1"><%= addr.name %></p>
                                            <p class="text-sm text-gray-600 mb-1">+91 <%= addr.phone %></p>
                                            <p class="text-sm text-gray-600 leading-relaxed">
                                                <%= addr.buildingName %>, <%= addr.landMark %><br>
                                                <%= addr.city %>, <%= addr.state %> - <%= addr.pincode %>
                                            </p>
                                        </div>
                                        <button onclick="window.location.href='/editAddress?id=<%= addr._id %>&from=checkOut'" class="bg-blue-500 hover:bg-blue-600 text-white text-xs font-medium px-4 py-2 rounded-lg transition-colors duration-200">
                                            Edit
                                        </button>
                                    </label>
                                </div>
                            <% }) %>
                        </div>
                    <% } else { %>
                        <p class="text-sm text-gray-600 mb-4">No address found. Please add a delivery address.</p>
                    <% } %>
                    
                    <!-- Add New Address Button -->
                    <button onclick="window.location.href='/addAddress'" class="w-full mt-4 border-2 border-dashed border-gray-300 hover:border-blue-400 text-gray-600 hover:text-blue-600 text-sm font-medium py-3 px-4 rounded-lg transition-colors duration-200 flex items-center justify-center gap-2">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                        </svg>
                        Add New Address
                    </button>
                </div>

                <!-- Payment Options -->
                <div class="bg-white rounded-xl shadow-xl border border-gray-200 p-6">
                    <h2 class="text-lg font-semibold text-gray-900 mb-4 uppercase tracking-wide">Payment Method</h2>
                    
                    <div class="space-y-3">
                        <!-- Razorpay Option -->
                        <label class="flex items-center p-4 border border-gray-200 rounded-lg cursor-pointer hover:bg-blue-100 transition-colors duration-200">
                            <input type="radio" name="payment_method" value="Razorpay" checked class="w-4 h-4 text-blue-600 border-gray-300 focus:ring-blue-500">
                            <div class="ml-3 flex-1">
                                <div class="flex items-center gap-3">
                                    <div class="w-8 h-8 bg-blue-500 rounded flex items-center justify-center">
                                        <svg class="w-4 h-4 text-white" fill="currentColor" viewBox="0 0 24 24">
                                            <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
                                        </svg>
                                    </div>
                                    <div>
                                        <p class="text-sm font-medium text-gray-900">Razorpay</p>
                                        <p class="text-xs text-gray-500">UPI, Cards, Netbanking, Wallets</p>
                                    </div>
                                </div>
                            </div>
                        </label>

                        <!-- Cash on Delivery Option -->
                        <label class="flex items-center p-4 border border-gray-200 rounded-lg cursor-pointer hover:bg-green-100 transition-colors duration-200">
                            <input type="radio" name="payment_method" value="COD" class="w-4 h-4 text-blue-600 border-gray-300 focus:ring-blue-500">
                            <div class="ml-3 flex-1">
                                <div class="flex items-center gap-3">
                                    <div class="w-8 h-8 bg-green-500 rounded flex items-center justify-center">
                                        <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 9V7a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2m2 4h10a2 2 0 002-2v-6a2 2 0 00-2-2H9a2 2 0 00-2 2v6a2 2 0 002 2zm7-5a2 2 0 11-4 0 2 2 0 014 0z"/>
                                        </svg>
                                    </div>
                                    <div>
                                        <p class="text-sm font-medium text-gray-900">Cash on Delivery</p>
                                        <p class="text-xs text-gray-500">Pay when you receive</p>
                                    </div>
                                </div>
                            </div>
                        </label>

                        <!-- Wallet Option -->
                        <label class="flex items-center p-4 border border-gray-200 rounded-lg cursor-pointer hover:bg-purple-100 transition-colors duration-200">
                            <input type="radio" name="payment_method" value="Wallet" class="w-4 h-4 text-blue-600 border-gray-300 focus:ring-blue-500">
                            <div class="ml-3 flex-1">
                                <div class="flex items-center gap-3">
                                    <div class="w-8 h-8 bg-purple-500 rounded flex items-center justify-center">
                                        <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 10h18M7 15h1m4 0h1m-7 4h12a3 3 0 003-3V8a3 3 0 00-3-3H6a3 3 0 00-3 3v8a3 3 0 003 3z"/>
                                        </svg>
                                    </div>
                                    <div>
                                        <p class="text-sm font-medium text-gray-900">Digital Wallet</p>
                                        <p class="text-xs text-gray-500">Pay with our soleus wallet</p>
                                    </div>
                                </div>
                            </div>
                        </label>
                    </div>
                </div>
            </div>

            <!-- Right Side: Order Summary -->
            <div class="space-y-6">
                <!-- Order Items -->
                <div class="bg-white rounded-xl shadow-xl border border-gray-200 p-6">
                    <h2 class="text-lg font-semibold text-gray-900 mb-6 uppercase tracking-wide">Order Summary</h2>
                    
                    <div class="space-y-4">
                        <% if (cartItems && cartItems.length > 0) { %>
                            <% cartItems.forEach(item => { %>
                                <div class="flex gap-4 p-4 border border-gray-100 rounded-lg">
                                    <div class="w-16 h-16 sm:w-20 sm:h-20 rounded-lg flex-shrink-0 overflow-hidden">
                                        <img src="/uploads/re-image/<%= item.image || 'default.jpg' %>" alt="<%= item.name %>" class="w-full h-full object-cover">
                                    </div>
                                    <div class="flex-1 min-w-0">
                                        <h3 class="text-sm font-medium text-gray-900 mb-1 line-clamp-2"><%= item.name %></h3>
                                        <p class="text-xs text-gray-500 mb-2">Size: <%= item.size %> | Color: <%= item.color %></p>
                                        <div class="flex items-center justify-between">
                                            <span class="text-xs text-gray-600">Qty: <%= item.quantity %></span>
                                            <span class="text-sm font-semibold text-gray-900">₹<%= item.total %></span>
                                        </div>
                                    </div>
                                </div>
                            <% }) %>
                        <% } else { %>
                            <p class="text-sm text-gray-600">No items in your cart.</p>
                        <% } %>
                    </div>

                    <!-- Coupon Section -->
                    <div class="mt-6 pt-4 border-t border-gray-200">
                        <div class="flex gap-2">
                            <input type="text" id="couponCode" placeholder="Enter coupon code" class="flex-1 px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent" value="<%= priceDetails.discount > 0 && session.appliedCoupon ? session.appliedCoupon.code : '' %>">
                            <button id="applyCouponBtn" onclick="applyCoupon('<%= isBuyNow ? 'true' : 'false' %>')" class="bg-yellow-400 hover:bg-yellow-500 text-black text-sm font-medium px-4 py-2 rounded-lg transition-colors duration-200 whitespace-nowrap <%= priceDetails.discount > 0 ? 'hidden' : '' %>">
                                Apply
                            </button>
                            <button id="removeCouponBtn" onclick="removeCoupon('<%= isBuyNow ? 'true' : 'false' %>')" class="bg-red-500 hover:bg-red-600 text-white text-sm font-medium px-4 py-2 rounded-lg transition-colors duration-200 whitespace-nowrap <%= priceDetails.discount > 0 ? '' : 'hidden' %>">
                                Remove
                            </button>
                        </div>
                        <p class="text-xs text-green-600 mt-2 flex items-center gap-1">
                            <svg class="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
                            </svg>
                            Free delivery on orders above ₹2500
                        </p>
                        <!-- Applicable Coupons -->
                        <% if (applicableCoupons && applicableCoupons.length > 0) { %>
                            <div class="mt-4 max-h-32 overflow-y-auto">
                                <h3 class="text-sm font-semibold text-gray-900 mb-2">Available Coupons</h3>
                                <% applicableCoupons.forEach(coupon => { %>
                                    <div class="border border-gray-200 rounded-lg p-3 mb-2 cursor-pointer hover:bg-gray-100" onclick="applyCouponFromList('<%= coupon.code %>', '<%= isBuyNow ? 'true' : 'false' %>')">
                                        <p class="text-sm font-medium text-gray-900"><%= coupon.name %> (<%= coupon.code %>)</p>
                                        <p class="text-xs text-gray-600">Discount: <%= coupon.discountType === 'fixed' ? '₹' + coupon.offerPrice : coupon.offerPrice + '%' %></p>
                                        <p class="text-xs text-gray-600">Min. Purchase: ₹<%= coupon.minimumPrice %></p>
                                    </div>
                                <% }) %>
                            </div>
                        <% } %>
                    </div>
                </div>

                <!-- Price Breakdown -->
                <div class="bg-white rounded-xl shadow-2xl border border-gray-200 p-6">
                    <h3 class="text-lg font-semibold text-gray-900 mb-4">Price Details</h3>
                    
                    <div class="space-y-3">
                        <div class="flex justify-between text-sm">
                            <span class="text-gray-600">Subtotal (<%= priceDetails.itemCount %> items)</span>
                            <span id="subtotalValue" class="text-gray-900">₹<%= priceDetails.subtotal %></span>
                        </div>
                        <div class="flex justify-between text-sm">
                            <span class="text-gray-600">Delivery charges</span>
                            <span id="deliveryChargesValue" class="text-green-600"><%= priceDetails.deliveryCharges === 0 ? 'Free' : `₹${priceDetails.deliveryCharges}` %></span>
                        </div>
                        <div class="flex justify-between text-sm">
                            <span class="text-gray-600">Discount</span>
                            <span id="discountValue" class="text-gray-900">₹<%= priceDetails.discount %></span>
                        </div>
                        <div class="border-t border-gray-200 pt-3">
                            <div class="flex justify-between items-center">
                                <span class="text-lg font-semibold text-gray-900">Total Amount</span>
                                <span id="totalValue" class="text-xl font-bold text-gray-900">₹<%= priceDetails.totalAmount %></span>
                            </div>
                        </div>
                    </div>

                    <!-- Place Order Button -->
                    <button onclick='proceedToPayment("<%= isBuyNow ? 'true' : 'false' %>")' class="w-full mt-6 bg-blue-600 hover:bg-blue-700 text-white font-medium py-3 px-4 rounded-lg transition-colors duration-200 text-sm uppercase tracking-wide">
                        Place Order
                    </button>
                    
                    <p class="text-xs text-gray-500 text-center mt-3">
                        By placing this order, you agree to our terms and conditions
                    </p>
                </div>
            </div>
        </div>
    </div>

    <!-- Added Razorpay Checkout script -->
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
    document.addEventListener('DOMContentLoaded', () => {
        // Payment method selection feedback
        const paymentRadios = document.querySelectorAll('input[name="payment_method"]');

        paymentRadios.forEach(radio => {
            radio.addEventListener('change', () => {
                paymentRadios.forEach(r => {
                    r.closest('label').classList.remove('ring-2', 'ring-blue-500', 'bg-blue-50');
                });
                radio.closest('label').classList.add('ring-2', 'ring-blue-500', 'bg-blue-50');
            });
        });

        // Apply styles to the initially checked radio
        const checkedRadio = document.querySelector('input[name="payment_method"]:checked');
        if (checkedRadio) {
            checkedRadio.closest('label').classList.add('ring-2', 'ring-blue-500', 'bg-blue-50');
        }
    });

    function applyCouponFromList(couponCode, isBuyNow) {
        document.getElementById('couponCode').value = couponCode;
        applyCoupon(isBuyNow);
    }

async function applyCoupon(isBuyNow) {
    try {
        const couponCode = document.getElementById('couponCode').value.trim();
        const orderId = '<%= orderId || "" %>'; // Get orderId from EJS context
        if (!couponCode) {
            await Swal.fire({
                icon: 'warning',
                title: 'Empty Coupon',
                text: 'Please enter a coupon code.',
                showConfirmButton: true
            });
            return;
        }

        const response = await fetch('/applyCoupon', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ couponCode, isBuyNow, orderId })
        });

        const data = await response.json();
        if (data.success) {
            await Swal.fire({
                toast: true,
                icon: 'success',
                title: 'Coupon applied!',
                showConfirmButton: false,
                timer: 1500
            });

            // Update price details in the UI
            document.getElementById('subtotalValue').textContent = `₹${data.priceDetails.subtotal}`;
            document.getElementById('deliveryChargesValue').textContent = data.priceDetails.deliveryCharges === 0 ? 'Free' : `₹${data.priceDetails.deliveryCharges}`;
            document.getElementById('discountValue').textContent = `-₹${data.priceDetails.discount}`;
            document.getElementById('totalValue').textContent = `₹${data.priceDetails.totalAmount}`;

            // Show remove coupon button, hide apply button, set coupon code
            document.getElementById('removeCouponBtn').classList.remove('hidden');
            document.getElementById('applyCouponBtn').classList.add('hidden');
            document.getElementById('couponCode').value = couponCode;
            document.getElementById('couponCode').placeholder = 'Coupon applied';
        } else {
            await Swal.fire({
                icon: 'error',
                title: 'Invalid Coupon',
                text: data.message || 'Coupon code is invalid.',
                showConfirmButton: true
            });
        }
    } catch (error) {
        await Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Failed to apply coupon.',
            showConfirmButton: true
        });
    }
}

async function removeCoupon(isBuyNow) {
    try {
        const orderId = '<%= orderId || "" %>'; // Get orderId from EJS context
        const response = await fetch('/removeCoupon', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ isBuyNow, orderId })
        });

        const data = await response.json();
        if (data.success) {
            await Swal.fire({
                toast: true,
                icon: 'success',
                title: 'Coupon removed!',
                showConfirmButton: false,
                timer: 1500
            });

            // Update price details in the UI
            document.getElementById('subtotalValue').textContent = `₹${data.priceDetails.subtotal}`;
            document.getElementById('deliveryChargesValue').textContent = data.priceDetails.deliveryCharges === 0 ? 'Free' : `₹${data.priceDetails.deliveryCharges}`;
            document.getElementById('discountValue').textContent = `-₹${data.priceDetails.discount}`;
            document.getElementById('totalValue').textContent = `₹${data.priceDetails.totalAmount}`;

            // Hide remove coupon button, show apply button, clear coupon input
            document.getElementById('removeCouponBtn').classList.add('hidden');
            document.getElementById('applyCouponBtn').classList.remove('hidden');
            document.getElementById('couponCode').value = '';
            document.getElementById('couponCode').placeholder = 'Enter coupon code';
        } else {
            await Swal.fire({
                icon: 'error',
                title: 'Error',
                text: data.message || 'Failed to remove coupon.',
                showConfirmButton: true
            });
        }
    } catch (error) {
        await Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Failed to remove coupon.',
            showConfirmButton: true
        });
    }
}

    //check
async function proceedToPayment(isBuyNow) {
    try {
        const addressRadios = document.querySelectorAll('input[name="address"]:checked');
        const addressId = addressRadios.length > 0 ? addressRadios[0].value : null;
        const paymentMethod = document.querySelector('input[name="payment_method"]:checked')?.value;
        const orderId = '<%= orderId || "" %>'; // Get orderId from EJS context
        const isFailedPayment = !!orderId;
        const totalAmount = parseFloat(document.getElementById('totalValue').textContent.replace('₹', ''));

        if (!addressId) {
            await Swal.fire({
                icon: 'warning',
                title: 'No Address Selected',
                text: 'Please select a delivery address.',
                showConfirmButton: true
            });
            return;
        }

        if (!paymentMethod) {
            await Swal.fire({
                icon: 'warning',
                title: 'No Payment Method',
                text: 'Please select a payment method.',
                showConfirmButton: true
            });
            return;
        }

        if (paymentMethod === 'COD' && totalAmount > 3000) {
            await Swal.fire({
                iconHtml: '<i class="fas fa-exclamation-triangle text-yellow-500" style="font-size: 2.5rem;"></i>',
                title: '<span class="text-lg font-semibold text-black">COD Not Available</span>',
                html: `
                    <div class="text-center py-2">
                        <p class="text-black mb-3">COD not available for orders above <span class="font-bold text-yellow-600">₹3,000</span></p>
                        <div class="bg-yellow-100 border border-yellow-300 rounded-lg p-3 mb-3">
                            <p class="text-sm text-black">Order Total: <span class="font-bold text-yellow-700">₹${totalAmount.toFixed(2)}</span></p>
                        </div>
                        <p class="text-sm text-gray-700">Please use Razorpay or Wallet payment</p>
                    </div>
                `,
                confirmButtonText: 'Choose Payment',
                confirmButtonColor: '#eab308',
                customClass: {
                    popup: 'rounded-lg shadow-xl',
                    confirmButton: 'px-6 py-2 rounded-md font-medium'
                },
                backdrop: 'rgba(0,0,0,0.5)',
                width: '22rem',
                padding: '1.5rem'
            });
            return;
        }

        if (paymentMethod === 'Razorpay') {
            const response = await fetch('/create-razorpay-order', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ isBuyNow, addressId, orderId })
            });

            const data = await response.json();
            if (!data.success) {
                await Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: data.message || 'Failed to create payment order',
                    showConfirmButton: true
                });
                return;
            }

            const order = data.order;
            const options = {
                key: data.key_id,
                amount: order.amount,
                currency: order.currency,
                name: 'Soleus Shoes',
                description: 'Order Payment',
                order_id: order.id,
                handler: async function (response) {
                    const verifyResponse = await fetch('/verify-razorpay-payment', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            razorpay_payment_id: response.razorpay_payment_id,
                            razorpay_order_id: response.razorpay_order_id,
                            razorpay_signature: response.razorpay_signature,
                            isBuyNow,
                            addressId,
                            paymentMethod,
                            orderId
                        })
                    });

                    const verifyData = await verifyResponse.json();
                    if (verifyData.success) {
                        await Swal.fire({
                            toast: true,
                            icon: 'success',
                            title: 'Payment successful',
                            showConfirmButton: false,
                            timer: 1500
                        });
                    } else {
                        await Swal.fire({
                            icon: 'error',
                            title: 'Payment Failed',
                            text: verifyData.message || 'Payment verification failed',
                            showConfirmButton: true
                        });
                    }
                    window.location.href = verifyData.redirectUrl;
                },
                prefill: {
                    name: '<%= user.name || "" %>',
                    email: '<%= user.email || "" %>',
                    contact: '<%= user.phone || "" %>'
                },
                theme: {
                    color: '#3399cc'
                },
                modal: {
                    ondismiss: async function () {
                        await fetch('/handle-payment-failure', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                razorpayOrderId: order.id,
                                isBuyNow,
                                addressId,
                                paymentMethod,
                                orderId
                            })
                        }).then(res => res.json()).then(data => {
                            window.location.href = `/order/failure?razorpayOrderId=${order.id}&isBuyNow=${isBuyNow || isFailedPayment}`;
                        }).catch(err => {
                            window.location.href = `/order/failure?razorpayOrderId=${order.id}&isBuyNow=${isBuyNow || isFailedPayment}`;
                        });
                    }
                }
            };

            const rzp = new Razorpay(options);
            rzp.on('payment.failed', async function (response) {
                await fetch('/handle-payment-failure', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        razorpayOrderId: order.id,
                        isBuyNow,
                        addressId,
                        paymentMethod,
                        orderId,
                        errorCode: response.error.code,
                        errorDescription: response.error.description
                    })
                }).then(res => res.json()).then(data => {
                    window.location.href = `/order/failure?razorpayOrderId=${order.id}&isBuyNow=${isBuyNow || isFailedPayment}`;
                }).catch(err => {
                    window.location.href = `/order/failure?razorpayOrderId=${order.id}&isBuyNow=${isBuyNow || isFailedPayment}`;
                });
            });
            rzp.open();
        } else {
            const response = await fetch('/proceedToPayment', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ isBuyNow, addressId, paymentMethod, orderId })
            });

            const data = await response.json();
            if (data.success && data.redirectUrl) {
                await Swal.fire({
                    toast: true,
                    icon: 'success',
                    title: 'Order placed successfully',
                    showConfirmButton: false,
                    timer: 1500
                });
                window.location.href = data.redirectUrl;
            } else if(data.message.includes('Cash on Delivery')){
                await Swal.fire({
                    iconHtml: '<i class="fas fa-exclamation-triangle text-yellow-500" style="font-size: 2.5rem;"></i>',
                    title: '<span class="text-lg font-semibold text-black">COD Not Available</span>',
                    html: `
                        <div class="text-center py-2">
                            <p class="text-black mb-3">COD not available for orders above <span class="font-bold text-yellow-600">₹3,000</span></p>
                            <div class="bg-yellow-100 border border-yellow-300 rounded-lg p-3 mb-3">
                                <p class="text-sm text-black">Order Total: <span class="font-bold text-yellow-700">₹${totalAmount.toFixed(2)}</span></p>
                            </div>
                            <p class="text-sm text-gray-700">Please use Razorpay or Wallet payment</p>
                        </div>
                    `,
                    confirmButtonText: 'Choose Payment',
                    confirmButtonColor: '#eab308',
                    customClass: {
                        popup: 'rounded-lg shadow-xl',
                        confirmButton: 'px-6 py-2 rounded-md font-medium'
                    },
                    backdrop: 'rgba(0,0,0,0.5)',
                    width: '22rem',
                    padding: '1.5rem'
                });
                return;
            } else {
                await Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: data.message || 'Failed to proceed to payment',
                    showConfirmButton: true
                });
            }
        }
    } catch (error) {
        await Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Something went wrong!',
            showConfirmButton: true
        });
    }
}
</script>
</body>
<%- include('../../views/partials/user/footer') %>