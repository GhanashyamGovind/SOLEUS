<%- include('../../views/partials/user/header', {title: 'Product'}) %>

<!-- Back Button -->
<div class="w-full max-w-5xl mx-auto px-4 mt-4 flex justify-end">
    <button class="btn-back bg-gray-600 text-white font-semibold py-2 px-4 rounded-lg shadow-md hover:bg-gray-700 flex items-center" onclick="goBack()">
        <i class="fas fa-arrow-left mr-2"></i> Back
    </button>
</div>

<!-- Main Content -->
<main class="flex-grow w-full py-8 px-4">
    <div class="w-full max-w-5xl mx-auto bg-white rounded-lg shadow-lg p-6 md:p-8 relative">
        <!-- Product Section -->
        <div class="flex flex-col md:flex-row gap-8">
            <!-- Image Section -->
            <div class="w-full md:w-1/2 flex flex-col md:flex-row gap-4">
                <!-- Thumbnail Images (Vertical on the Left) -->
                <div class="flex flex-row md:flex-col gap-4 order-2 md:order-1">
                    <% for( let i = 0; i < product.productImage.length; i++ ) { %>
                    <img src="/uploads/re-image/<%= product.productImage[i] %>" alt="Product Image" class="thumbnail-img w-20 h-20 rounded-md cursor-pointer <%= i === 0 ? 'active' : '' %>" onclick="changeImage(this)">
                    <% } %>
                </div>
                <!-- Main Image and Buttons -->
                <div class="order-1 md:order-2 flex-1 flex flex-col">
                    <div class="main-image-container w-full max-w-md overflow-hidden relative">
                        <img id="mainImage" src="/uploads/re-image/<%= product.productImage[0] %>" alt="Product Image" class="main-img w-full rounded-lg shadow-md mb-4">
                        <div id="magnifier" class="magnifier hidden"></div>
                    </div>
                    <!-- Action Buttons Below Main Image -->
                    <div class="flex gap-4">
                        <button onclick="addToCart('<%= product._id %>')" class="btn-add-to-cart w-full md:w-auto bg-gray-600 text-white font-semibold py-3 px-6 rounded-lg shadow-md hover:bg-gray-700 flex items-center justify-center">
                            <i class="fas fa-shopping-cart mr-2"></i> Add to Cart
                        </button>
                        <button onclick="buyNow('<%= product._id %>')" class="btn-buy-now w-full md:w-auto bg-green-600 text-white font-semibold py-3 px-6 rounded-lg shadow-md hover:bg-green-700">
                            Buy Now
                        </button>
                    </div>
                </div>
            </div>

            <!-- Product Details Section -->
            <div class="w-full md:w-1/2 flex flex-col">
                <!-- Product Info (Single Column) -->
                <h3 class="text-xl font-semibold text-gray-700 mb-2"><%= brand.brandName %></h3>
                <h2 class="text-2xl md:text-3xl font-bold text-gray-800 mb-2"><%= product.productName %></h2>
                <p class="text-gray-600 mb-2"><%= product.color %></p>
                <p class="text-gray-600 mb-2"><%= category.name %></p>
                <div class="flex items-center mb-4">
                    <span class="text-xl md:text-2xl font-bold text-gray-800" id="price-display">₹<%= variants[0].salePrice %></span>
                    <span class="text-sm text-gray-500 line-through ml-2" id="regular-price-display">₹<%= variants[0].regularPrice %></span>
                    <% if (product.appliedOffer > 0) { %>
                        <p class="offer-stamp">
                            <%= product.appliedOffer %>% <%= product.offerType === 'product' ? 'Product Offer' : 'Category Offer' %>
                            <div class="glitter"></div>
                            <div class="glitter"></div>
                            <div class="glitter"></div>
                            <div class="glitter"></div>
                            <div class="glitter"></div>
                            <div class="glitter"></div>
                            <div class="glitter"></div>
                            <div class="glitter"></div>
                            <div class="glitter"></div>
                            <div class="glitter"></div>
                            <!-- Confetti particles -->
                            <div class="confetti"></div>
                            <div class="confetti"></div>
                            <div class="confetti"></div>
                            <div class="confetti"></div>
                            <div class="confetti"></div>
                            <div class="confetti"></div>
                            <div class="confetti"></div>
                            <div class="confetti"></div>
                        </p>
                    <% } %>
                </div>
                <!-- Available Sizes -->
                <div class="mb-4">
                    <span class="text-sm text-green-600 ml-2">STOCK: <span id="stock-display"><%= variants[0].stock %></span></span>
                    <h3 class="text-lg font-semibold text-gray-700 mb-2 mt-2">Available Sizes:</h3>
                    <div class="flex flex-wrap gap-2">
                        <% variants.forEach((variant, index) => { %>
                        <button class="size-btn px-4 py-2 rounded-md text-gray-800 <%= index === 0 ? 'selected' : '' %>"
                            onclick="selectSize(this)"
                            data-size="<%= variant.size %>"
                            data-price="<%= variant.salePrice %>"
                            data-regular-price="<%= variant.regularPrice %>"
                            data-stock="<%= variant.stock %>"
                            data-sku="<%= variant.sku %>"
                        >
                            <%= variant.size %>
                        </button>
                        <% }) %>
                    </div>
                </div>
                <!-- Description -->
                <div class="mb-4">
                    <h3 class="text-lg font-semibold text-gray-700 mb-2">Description:</h3>
                    <p class="text-gray-600">
                        <%= product.description %>
                    </p>
                </div>
            </div>
        </div> 
    </div>

    <!-- Related Products Section -->
    <div class="w-full max-w-5xl mx-auto mt-8">
        <h3 class="text-2xl md:text-3xl font-bold text-gray-800 mb-6 text-center">Related Products</h3>
        <div id="related-products-grid" class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
            <% if (!relatedProducts || relatedProducts.length === 0) { %>
                <p class="text-center text-gray-500 col-span-full">No related products found.</p>
            <% } else { %>
                <% relatedProducts.forEach(product => { %>
                    <div class="bg-white p-4 rounded-lg shadow-md border border-gray-200 transition-all duration-300 ease-in-out hover:shadow-xl hover:-translate-y-1 hover:border-yellow-400 hover:bg-gray-200">
                        <div class="relative overflow-hidden rounded-lg mb-3 h-48 bg-gray-100 flex items-center justify-center group">
                            <% if (product.appliedOffer > 0) { %>
                             <p class="absolute top-2 right-2 bg-green-500 text-white text-xs font-bold px-2 py-1 rounded-full transform rotate-12 shadow-md z-10"><%= product.appliedOffer %>% off</p>
                            <% } %>
                            <img src="/uploads/re-image/<%= product.productImage && product.productImage[0] ? product.productImage[0] : 'default.jpg' %>" alt="<%= product.productName || 'Product' %>" class="object-cover w-full h-full transition-transform duration-500 group-hover:scale-110">
                            <button onclick="addTowhislist('<%= product._id %>')" class="absolute top-2 left-2 p-2 bg-white rounded-full shadow hover:bg-red-600 transition-transform duration-200 hover:scale-110">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
                                </svg>
                            </button>
                        </div>
                        <h3 class="font-semibold text-lg mb-1 transition-colors duration-200 hover:text-yellow-600">
                            <a href="/productDetails?id=<%= product._id %>"><%= product.productName || 'N/A' %></a>
                        </h3>
                        <p class="text-xs text-gray-500 mb-2"><%= product.brand && product.brand.brandName ? product.brand.brandName : 'N/A' %></p>
                        <div class="flex justify-between items-center">
                            <p class="text-lg font-bold text-yellow-600">₹<%= product.salePrice || 'N/A' %></p>
                            <p class="text-sm text-gray-500 line-through">₹<%= product.regularPrice || 'N/A' %></p>
                        </div>
                    </div>
                <% }) %>
            <% } %>
        </div>
    </div>
</main>

<%- include('../../views/partials/user/footer') %>

<script>
    function changeImage(element) {
        const mainImage = document.getElementById('mainImage');
        const magnifier = document.getElementById('magnifier');
        mainImage.src = element.src;
        magnifier.style.backgroundImage = `url('${element.src}')`;
        document.querySelectorAll('.thumbnail-img').forEach(img => img.classList.remove('active'));
        element.classList.add('active');
    }

    function selectSize(element) {
        // Remove 'selected' class from all size buttons
        document.querySelectorAll('.size-btn').forEach(btn => btn.classList.remove('selected'));
        // Add 'selected' class to the clicked button
        element.classList.add('selected');

        // getting values form the btn data
        const salePrice = element.dataset.price;
        const regularPrice = element.dataset.regularPrice;
        const stock = element.dataset.stock;
        const sku = element.dataset.sku;

        // Update the price display
        const priceDisplay = document.getElementById('price-display');
        priceDisplay.textContent = `₹${salePrice}`;

        // Update the regular price display
        const regularPriceDisplay = document.getElementById('regular-price-display');
        regularPriceDisplay.textContent = `₹${regularPrice}`;

        // Update the stock display
        const stockDisplay = document.getElementById('stock-display');
        stockDisplay.textContent = stock;

        console.log('Selected size:', element.dataset.size, 'SKU:', sku);
        console.log('Selected size:', element.dataset.size);
    }

    function goBack() {
        window.history.back();
    }

    // Magnifier Logic
    const mainImageContainer = document.querySelector('.main-image-container');
    const mainImage = document.getElementById('mainImage');
    const magnifier = document.getElementById('magnifier');
    const magnifierSize = 200; // Increased size to 200px
    const magnifierHalfSize = magnifierSize / 2;
    const zoomLevel = 2;

    mainImageContainer.addEventListener('mouseenter', () => {
        magnifier.classList.remove('hidden');
        magnifier.style.backgroundImage = `url('${mainImage.src}')`;
        magnifier.style.backgroundSize = `${mainImage.width * zoomLevel}px ${mainImage.height * zoomLevel}px`;
    });

    mainImageContainer.addEventListener('mouseleave', () => {
        magnifier.classList.add('hidden');
    });

    mainImageContainer.addEventListener('mousemove', (e) => {
        const rect = mainImageContainer.getBoundingClientRect();
        const posX = e.clientX - rect.left;
        const posY = e.clientY - rect.top;

        // Position the magnifier centered under the cursor
        let magnifierX = posX - magnifierHalfSize;
        let magnifierY = posY - magnifierHalfSize;

        // Ensure the magnifier stays within the bounds of the main image
        magnifierX = Math.max(0, Math.min(magnifierX, rect.width - magnifierSize));
        magnifierY = Math.max(0, Math.min(magnifierY, rect.height - magnifierSize));

        magnifier.style.left = `${magnifierX}px`;
        magnifier.style.top = `${magnifierY}px`;

        // Calculate the background position for the zoomed-in area
        const bgPosX = (posX * zoomLevel) - magnifierHalfSize;
        const bgPosY = (posY * zoomLevel) - magnifierHalfSize;
        magnifier.style.backgroundPosition = `-${bgPosX}px -${bgPosY}px`;
    });

    async function addTowhislist(productId) {
        try {
            const response = await fetch ('/addToWishlist', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept' : 'application/josn'
                },
                body: JSON.stringify({ productId })
            });
             console.log('Response status:', response.status);
            const text = await response.text();
            console.log('Raw response:', text); // Debug raw response

            let data;
            try {
            data = JSON.parse(text);
            } catch (error) {
            console.error('Failed to parse JSON response:', error);
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Invalid server response. Please try again.',
                showConfirmButton: true
            });
            return;
            }

        if (!data.status && data.message?.toLowerCase().includes('login')) {
          Swal.fire({
            toast: true,
            icon: 'info',
            title: 'Login Required',
            text: data.message,
            showConfirmButton: false,
            timer: 1500,
            timerProgressBar: true 
          });
          return;
        }

        if(data.status) {
          Swal.fire({
            toast: true,
            position: 'top-end',
            icon: 'success',
            title: data.message,
            html: `<img src="/images/shoes.gif" alt="Shoes GIF" style="margin-top: 10px; width: auto; height: auto;" />`,
            showConfirmButton: false,
            timer: 3500,
            timerProgressBar: true,
            width: 400,
            padding: '1.5em',
            color: '#ffffff',
            background: '#000'
          });
        } else {
          Swal.fire({
            toast: true,
            position: 'top-end',
            icon: 'warning',
            title: data.message,
            showConfirmButton: false,
            timer: 2000,
            timerProgressBar: true
          });
        }

        } catch (error) {
            console.error('Error adding to wishlist:', error);
            Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Something went wrong!'
            });
        }
    }

    // add to cart fn
async function addToCart(productId) {
    try {
        // Ensure a size is selected
        const selectedSizeBtn = document.querySelector('.size-btn.selected');
        if (!selectedSizeBtn) {
            Swal.fire({
                toast: true,
                position: 'top-end',
                title: 'Please select a size',
                showConfirmButton: false,
                timer: 2000,
                timerProgressBar: true
            });
            return;
        }

        const selectSize = selectedSizeBtn.dataset.size;
        const selectedSku = selectedSizeBtn.dataset.sku;

        // Prepare cart data
        const cartData = {
            productId: productId,
            size: selectSize,
            sku: selectedSku,
            quantity: 1
        };

        // Make the API request
        const response = await fetch('/addTocart', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify(cartData)
        });

        // Check if the response is JSON
        const contentType = response.headers.get('content-type');
        if (!contentType || !contentType.includes('application/json')) {
            console.error('Response is not JSON:', contentType);
            Swal.fire({
                toast: true,
                icon: 'info',
                title: 'Login Required',
                text: 'Please login to add to cart',
                showConfirmButton: false,
                timer: 1500,
                timerProgressBar: true
            });
            return;
        }

        const text = await response.text();
        let data;
        try {
            data = JSON.parse(text);
        } catch (error) {
            console.error('Failed to parse JSON response:', error);
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Invalid server response. Please try again.',
                showConfirmButton: true
            });
            return;
        }

        // Check for login required message
        if (!data.success && data.message?.toLowerCase().includes('login')) {
            Swal.fire({
                toast: true,
                icon: 'info',
                title: 'Login Required',
                text: data.message,
                showConfirmButton: false,
                timer: 1500,
                timerProgressBar: true
            });
            return;
        }

        // Check for success
        if (data.success) {
            Swal.fire({
                toast: true,
                position: 'top-end',
                icon: 'success',
                title: data.message || 'Product added to cart successfully!',
                html:  `
                    <video width="200" autoplay muted loop>
                    <source src="/images/mrbean-cart.mp4" type="video/mp4">
                    Your browser does not support the video tag.
                    </video>
                `,
                showConfirmButton: false,
                timer: 3500,
                timerProgressBar: true,
                width: 400,
                padding: '1.5em',
                color: '#ffffff',
                background: '#000'
            });
        } else {
            Swal.fire({
                toast: true,
                position: 'top-end',
                icon: 'warning',
                title: data.message || 'Failed to add to cart',
                showConfirmButton: false,
                timer: 2000,
                timerProgressBar: true
            });
        }
    } catch (error) {
        console.error('Error adding to cart:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Something went wrong!'
        });
    }
}

async function buyNow(productId) {
    try {
        const selectedSizeBtn = document.querySelector('.size-btn.selected');
        if (!selectedSizeBtn) {
            Swal.fire({
                toast: true,
                position: 'top-end',
                title: 'Please select a size',
                showConfirmButton: false,
                timer: 2000,
                timerProgressBar: true
            });
            return;
        }

        const selectSize = selectedSizeBtn.dataset.size;
        const selectedSku = selectedSizeBtn.dataset.sku;

        const buyNowData = {
            productId: productId,
            size: selectSize,
            sku: selectedSku,
            quantity: 1
        };

        const response = await fetch('/buyNow', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify(buyNowData)
        });

        const contentType = response.headers.get('content-type');
        if (!contentType || !contentType.includes('application/json')) {
            console.error('Response is not JSON:', contentType);
            Swal.fire({
                toast: true,
                icon: 'info',
                title: 'Login Required',
                text: 'Please login to proceed to checkout',
                showConfirmButton: false,
                timer: 1500,
                timerProgressBar: true
            });
            return;
        }

        const text = await response.text();
        let data;
        try {
            data = JSON.parse(text);
        } catch (error) {
            console.error('Failed to parse JSON response:', error);
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Invalid server response. Please try again.',
                showConfirmButton: true
            });
            return;
        }

        if (!data.success && data.message?.toLowerCase().includes('login')) {
            Swal.fire({
                toast: true,
                icon: 'info',
                title: 'Login Required',
                text: data.message,
                showConfirmButton: false,
                timer: 1500,
                timerProgressBar: true
            });
            return;
        }

        if (data.success && data.redirectUrl) {
            Swal.fire({
                toast: true,
                position: 'top-end',
                icon: 'success',
                title: data.message || 'Proceeding to checkout!',
                showConfirmButton: false,
                timer: 1500,
                timerProgressBar: true
            }).then(() => {
                window.location.href = data.redirectUrl;
            });
        } else {
            Swal.fire({
                toast: true,
                position: 'top-end',
                icon: 'warning',
                title: data.message || 'Failed to proceed to checkout',
                showConfirmButton: false,
                timer: 2000,
                timerProgressBar: true
            });
        }
    } catch (error) {
        console.error('Error in buyNow:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Something went wrong!'
        });
    }
}

</script>

<!-- Inline CSS for Magnifier and Other Styles -->
<style>
    .main-image-container {
        position: relative;
        overflow: hidden;
    }

    .magnifier {
        position: absolute;
        width: 200px; /* Increased size */
        height: 200px; /* Increased size */
        border: 2px solid #facc15;
        background-repeat: no-repeat;
        pointer-events: none;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
    }
    .thumbnail-img {
        transition: transform 0.2s ease, opacity 0.3s ease;
    }
    .thumbnail-img:hover {
        transform: scale(1.05);
        opacity: 0.9;
    }
    .thumbnail-img.active {
        border: 2px solid #facc15;
        opacity: 1;
    }
    .btn-back, .btn-add-to-cart, .btn-buy-now, .btn-view-details, .size-btn {
        transition: transform 0.2s ease, background-color 0.3s ease;
    }
    .btn-back:hover, .btn-add-to-cart:hover, .btn-buy-now:hover, .btn-view-details:hover, .size-btn:hover {
        transform: scale(1.05);
    }
    .related-product-card {
        transition: transform 0.2s ease, box-shadow 0.3s ease;
    }
    .related-product-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    }
    .size-btn {
        border: 1px solid #d1d5db;
        background-color: #f3f4f6;
    }
    .size-btn.selected {
        background-color: #facc15;
        border-color: #facc15;
        color: #1f2937;
    }

.offer-stamp {
    position: absolute;
    top: 10px;
    right: 10px;
    width: 70px;
    height: 70px;
    background: #22c55e;
    color: white;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 10px;
    font-weight: bold;
    text-align: center;
    box-shadow: 0 4px 10px rgba(34, 197, 94, 0.3);
    z-index: 10;
    animation: stamp-pop 2s ease-out infinite;
}

.glitter {
    position: absolute;
    width: 3px;
    height: 3px;
    background: #ffd700;
    border-radius: 50%;
    top: 10px;
    animation: glitter-fall 3s linear infinite;
}

.glitter:nth-child(1) { right: 15px; animation-delay: 0s; }
.glitter:nth-child(2) { right: 25px; animation-delay: 0.3s; }
.glitter:nth-child(3) { right: 35px; animation-delay: 0.6s; }
.glitter:nth-child(4) { right: 45px; animation-delay: 0.9s; }
.glitter:nth-child(5) { right: 55px; animation-delay: 1.2s; }
.glitter:nth-child(6) { right: 20px; animation-delay: 1.5s; }
.glitter:nth-child(7) { right: 30px; animation-delay: 1.8s; }
.glitter:nth-child(8) { right: 40px; animation-delay: 2.1s; }
.glitter:nth-child(9) { right: 50px; animation-delay: 2.4s; }
.glitter:nth-child(10) { right: 60px; animation-delay: 2.7s; }

.confetti {
    position: absolute;
    width: 6px;
    height: 6px;
    top: 35px;
    animation: confetti-pop 2s ease-out infinite;
}

.confetti:nth-child(11) { 
    background: #ff6b6b; 
    right: 10px; 
    animation-delay: 0s;
    transform: rotate(45deg);
}
.confetti:nth-child(12) { 
    background: #4ecdc4; 
    right: 20px; 
    animation-delay: 0.1s;
}
.confetti:nth-child(13) { 
    background: #45b7d1; 
    right: 30px; 
    animation-delay: 0.2s;
    transform: rotate(90deg);
}
.confetti:nth-child(14) { 
    background: #f9ca24; 
    right: 40px; 
    animation-delay: 0.3s;
}
.confetti:nth-child(15) { 
    background: #6c5ce7; 
    right: 50px; 
    animation-delay: 0.4s;
    transform: rotate(135deg);
}
.confetti:nth-child(16) { 
    background: #fd79a8; 
    right: 60px; 
    animation-delay: 0.5s;
}
.confetti:nth-child(17) { 
    background: #00b894; 
    right: 25px; 
    animation-delay: 0.6s;
    transform: rotate(180deg);
}
.confetti:nth-child(18) { 
    background: #e17055; 
    right: 45px; 
    animation-delay: 0.7s;
}

@keyframes stamp-pop {
    0% { transform: scale(1); }
    50% { transform: scale(1.1); }
    100% { transform: scale(1); }
}

@keyframes glitter-fall {
    0% {
        transform: translateY(0px);
        opacity: 1;
    }
    100% {
        transform: translateY(400px);
        opacity: 0;
    }
}

@keyframes confetti-pop {
    0% {
        transform: translateY(0px) translateX(0px) rotate(0deg);
        opacity: 0;
    }
    20% {
        opacity: 1;
    }
    100% {
        transform: translateY(-100px) translateX(var(--random-x, 20px)) rotate(360deg);
        opacity: 0;
    }
}
</style>