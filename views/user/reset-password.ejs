<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Set New Password</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Quantico:wght@400;700&display=swap">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.12.4/dist/sweetalert2.all.min.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11.12.4/dist/sweetalert2.min.css" rel="stylesheet">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" integrity="sha512-DTOQO9RWCH3ppGqcWaEA1BIZOC6xxalwEsw9c2QQeAIftl+Vegovlnee1c9QX4TctnWMn13TZye+giMm8e2LwA==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <style>
        html, body, * {
            font-family: 'Quantico', sans-serif !important;
        }
        .rounded-bl-3xl {
            border-bottom-left-radius: 1.5rem;
        }
        .password-input {
            width: 100%;
            height: 2.5rem;
            font-size: 1rem;
            padding: 0.5rem;
            transition: all 0.3s ease;
        }
        @media (min-width: 640px) {
            .password-input {
                height: 3rem;
                font-size: 1.25rem;
            }
        }
        .password-input:focus {
            box-shadow: 0 0 10px rgba(251, 191, 36, 0.5);
        }
        .fade-in {
            animation: fadeIn 0.8s ease-out;
        }
        .submit-btn {
            transition: transform 0.2s ease, background-color 0.3s ease;
        }
        .submit-btn:hover {
            transform: scale(1.05);
        }
        .submit-btn:disabled {
            opacity: 0.7;
            cursor: not-allowed;
        }
        .gradient-bg {
            background: linear-gradient(135deg, #f6e05e, #facc15);
        }
        .toggle-btn {
            cursor: pointer;
            transition: color 0.3s ease;
            font-size: 1rem;
        }
        .toggle-btn:hover {
            color: #facc15;
        }
        @media (min-width: 640px) {
            .toggle-btn {
                font-size: 1.25rem;
            }
        }
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }
    </style>
</head>
<body class="bg-gray-100 flex flex-col min-h-screen">
    <header class="bg-yellow-400 w-full py-4 flex items-center justify-center shadow-md">
        <img src="https://via.placeholder.com/40" alt="Soleus Logo" class="h-10 mr-2">
        <h1 class="text-2xl font-bold text-black">SOLEUS</h1>
    </header>

    <main class="flex-grow flex items-center justify-center w-full">
        <div class="w-full max-w-md mx-auto bg-yellow-200 p-8 rounded-t-3xl rounded-bl-3xl shadow-lg fade-in">
            <h2 class="text-xl md:text-2xl font-bold text-center mb-4">SET NEW PASSWORD</h2>
            <p class="text-center text-sm md:text-base mb-6 text-gray-700">Enter and confirm your new password.</p>

            <form method="post" action="/reset-password" id="resetPasswordForm" onsubmit="return validateResetPasswordForm(event)">
                <div class="mb-4 relative">
                    <div class="flex items-center">
                        <input type="password" name="password" id="password" 
                               class="password-input bg-white border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-yellow-400" 
                               placeholder="New Password" required>
                        <i class="toggle-btn fas fa-eye text-gray-600 ml-2" onclick="togglePassword('password', this)"></i>
                    </div>
                    <p id="passwordError" class="text-red-500 text-xs mt-1 hidden"></p>
                </div>
                <div class="mb-6 relative">
                    <div class="flex items-center">
                        <input type="password" name="confirmPassword" id="confirmPassword" 
                               class="password-input bg-white border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-yellow-400" 
                               placeholder="Confirm New Password" required>
                        <i class="toggle-btn fas fa-eye text-gray-600 ml-2" onclick="togglePassword('confirmPassword', this)"></i>
                    </div>
                    <p id="confirmPasswordError" class="text-red-500 text-xs mt-1 hidden"></p>
                </div>

                <div class="text-center mb-4">
                    <button type="submit" id="submitBtn" 
                            class="w-full max-w-xs text-white py-3 rounded-lg submit-btn gradient-bg">
                        SET PASSWORD
                    </button>
                </div>

                <div class="text-center">
                    <a href="/login" class="text-sm md:text-base text-gray-600 hover:text-yellow-600 transition-colors">
                        Back to Login
                    </a>
                </div>
            </form>
            <% if (locals.message && message.length > 0) { %>
                <div class="text-red-500 text-center mt-4">
                    <%= message %>
                </div>
            <% } %>
        </div>
    </main>

    <script>
async function validateResetPasswordForm(event) {
    event.preventDefault();

    const password = document.getElementById('password').value.trim();
    const confirmPassword = document.getElementById('confirmPassword').value.trim();
    const passwordError = document.getElementById('passwordError');
    const confirmPasswordError = document.getElementById('confirmPasswordError');
    const submitBtn = document.getElementById('submitBtn');

    // Reset error messages
    passwordError.classList.add('hidden');
    confirmPasswordError.classList.add('hidden');

    // Client-side validation
    if (!password) {
        passwordError.textContent = 'Please enter a password.';
        passwordError.classList.remove('hidden');
        return false;
    }

    if (password.length < 8) {
        passwordError.textContent = 'Password must be at least 8 characters long.';
        passwordError.classList.remove('hidden');
        return false;
    }

    const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/;
    if (!passwordRegex.test(password)) {
        passwordError.textContent = 'Password must include at least one uppercase letter, one lowercase letter, one number, and one special character.';
        passwordError.classList.remove('hidden');
        return false;
    }

    if (!confirmPassword) {
        confirmPasswordError.textContent = 'Please confirm your password.';
        confirmPasswordError.classList.remove('hidden');
        return false;
    }

    if (password !== confirmPassword) {
        confirmPasswordError.textContent = 'Passwords do not match.';
        confirmPasswordError.classList.remove('hidden');
        return false;
    }

    submitBtn.disabled = true;
    submitBtn.textContent = 'Setting Password...';

    try {
        const response = await fetch('/reset-password', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ password, confirmPassword }),
            credentials: 'include'
        });

        const data = await response.json();

        submitBtn.disabled = false;
        submitBtn.textContent = 'SET PASSWORD';

        if (data.success) {
            await Swal.fire({
                icon: 'success',
                title: 'Success',
                text: data.message || 'Your password has been reset successfully.',
                showConfirmButton: false,
                timer: 2000
            });
            window.location.href = data.redirectUrl || '/login';
        } else {
            await Swal.fire({
                icon: 'error',
                title: 'Error',
                text: data.message || 'An error occurred. Please try again.'
            });
        }
    } catch (error) {
        console.error('Error resetting password:', error);
        submitBtn.disabled = false;
        submitBtn.textContent = 'SET PASSWORD';
        await Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'An error occurred. Please try again.'
        });
    }
}

        function togglePassword(inputId, button) {
            const input = document.getElementById(inputId);
            if (input.type === 'password') {
                input.type = 'text';
                button.classList.remove('fa-eye');
                button.classList.add('fa-eye-slash');
            } else {
                input.type = 'password';
                button.classList.remove('fa-eye-slash');
                button.classList.add('fa-eye');
            }
        }
    </script>
</body>
</html>