<%- include('../../views/partials/user/header', {title: 'Wishlist'}) %>

<style>
  /* Keep your existing styles */
  body {
    background: linear-gradient(145deg, #FFCA28 0%, #FFB300 40%, #212121 80%, #000000 100%);
    min-height: 100vh;
    position: relative;
    overflow-x: hidden;
  }
  body::before, body::after {
    /* Your bubble patch styles */
  }
  .wishlist-container {
    width: 60% !important;
    max-width: 60% !important;
    margin-left: 0;
  }
  @media (max-width: 640px) {
    .wishlist-container {
      width: 90% !important;
      max-width: 90% !important;
    }
    body::before, body::after {
      background-size: 150% 150%;
    }
  }
</style>

<main class="container mx-auto py-6 sm:py-8 px-3 sm:px-4">
  <h1 class="text-xl sm:text-2xl font-bold flex items-center space-x-2 mb-4 sm:mb-6 text-white">
    <span>WISH LISTS</span>
  </h1>

  <div class="flex flex-col gap-6 items-start">
    <!-- Wishlist Items -->
    <div class="wishlist-container flex flex-col gap-4 sm:gap-6">
      <% if (wishlist.length > 0) { %>
        <% for(let product of wishlist) { %>
          <div id="product-<%= product._id %>" class="flex items-center border-b-2 border-gray-300 py-3 sm:py-4 w-full bg-white bg-opacity-90 rounded-lg p-4">
            <img src="/uploads/re-image/<%= product.productImage[0] %>" alt="<%= product.productName %>" class="w-20 h-20 sm:w-24 sm:h-24 object-cover mr-3 sm:mr-4">
            <div class="flex-1 flex items-center justify-between">
              <div>
                <h2 class="text-base sm:text-lg font-semibold">
                  <a href="/productDetails?id=<%= product._id %>"><%= product.productName %></a>
                </h2>
                <div class="flex items-center space-x-2 sm:space-x-4">
                  <p class="text-sm sm:text-base text-gray-600"><%= product.category.name %></p>
                  <p class="text-base sm:text-lg font-bold">â‚¹ <%= product.regularPrice %></p>
                </div>
              </div>
              <div class="flex items-center space-x-1 sm:space-x-2">
                <button onclick='addToCartFromWishlist("<%= product._id %>", <%= JSON.stringify(product.variants) %>, "<%= product.productName %>")' class="bg-black rounded-full p-1.5 sm:p-2 hover:bg-gray-800">
                  <svg class="w-4 h-4 sm:w-6 sm:h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z"/>
                  </svg>
                </button>
                <button class="text-red-500 hover:text-red-700" onclick="confirmRemove('<%= product._id %>')">
                  <i class="fa fa-heart text-2xl"></i>
                </button>
              </div>
            </div>
          </div>
        <% } %>
      <% } else { %>
        <div class="bg-white bg-opacity-90 p-6 rounded-xl shadow-md text-center hover:bg-yellow-400">
          <h2 class="text-2xl text-gray-700">
            No items in the wishlist <br>
            add something pal
            <i class="fas fa-face-sad-tear text-black text-2xl mr-2"></i>
          </h2>
        </div>
      <% } %>
    </div>
  </div>
</main>

<%- include('../../views/partials/user/footer') %>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
  async function addToCartFromWishlist(productId, variants, productName) {
    try {
      // Filter variants with stock > 0
      const availableVariants = variants.filter(v => v.stock > 0);
      if (availableVariants.length === 0) {
        await Swal.fire({
          toast: true,
          position: 'top-end',
          icon: 'error',
          title: 'No stock available',
          text: `No sizes available for ${productName}`,
          showConfirmButton: false,
          timer: 2000,
          timerProgressBar: true
        });
        return;
      }

      // Create dropdown for sizes
      const sizeOptions = availableVariants
        .map(v => `<option value="${v.size}|${v.sku}">${v.size} (${v.stock} in stock)</option>`)
        .join('');

      // Show modal for size selection
      const { value: selectedSizeSku } = await Swal.fire({
        toast: true,
        title: `Select size for ${productName}`,
        html: `
          <select id="sizeSelect" class="swal2-select" style="width: 100%; padding: 8px;">
            ${sizeOptions}
          </select>
          <input type="number" id="quantity" class="swal2-input" min="1" max="3" value="1" style="margin-top: 10px;">
        `,
        showCancelButton: true,
        confirmButtonText: 'Add to Cart',
        cancelButtonText: 'Cancel',
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        preConfirm: () => {
          const sizeSku = document.getElementById('sizeSelect').value;
          const quantity = parseInt(document.getElementById('quantity').value);
          if (!sizeSku) {
            Swal.showValidationMessage('Please select a size');
            return false;
          }
          if (!quantity || quantity < 1 || quantity > 3) {
            Swal.showValidationMessage('Quantity must be between 1 and 3');
            return false;
          }
          return { size: sizeSku.split('|')[0], sku: sizeSku.split('|')[1], quantity };
        }
      });

      if (!selectedSizeSku) return; // User canceled

      const { size, sku, quantity } = selectedSizeSku;

      // Add to cart
      const cartResponse = await fetch('/addTocart', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ productId, size, sku, quantity })
      });

      const cartData = await cartResponse.json();
      if (!cartResponse.ok) {
        throw new Error(cartData.message || 'Failed to add to cart');
      }

      // Remove from wishlist
      const wishlistResponse = await fetch(`/removeWishlist/${productId}`, {
        method: 'DELETE'
      });

      const wishlistData = await wishlistResponse.json();
      if (wishlistResponse.ok && wishlistData.status) {
        const productElement = document.getElementById(`product-${productId}`);
        if (productElement) productElement.remove();
      } else {
        throw new Error(wishlistData.message || 'Failed to remove from wishlist');
      }

      // Show success message
      await Swal.fire({
        toast: true,
        position: 'center-right',
        icon: 'success',
        title: `${productName} ADDED TO CART`,
        html: `<img src="/images/nice.gif" alt="GIF" style="margin-top: 10px; width: auto; height: auto;" />`,
        showConfirmButton: false,
        timer: 2000,
        timerProgressBar: true,
        width: 350,
        padding: '1.2em',
        color: '#fff',
        background: '#22c55e'
      });

    } catch (error) {
      await Swal.fire({
        toast: true,
        position: 'top-end',
        icon: 'error',
        title: 'Error',
        text: error.message || 'Failed to add to cart or remove from wishlist',
        showConfirmButton: false,
        timer: 2000,
        timerProgressBar: true
      });
    }
  }

  async function confirmRemove(productId) {
    try {
      const result = await Swal.fire({
        toast: true,
        title: 'Are you sure?',
        text: 'Do you want to remove this item from your wishlist?',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#d33',
        cancelButtonColor: '#3085d6',
        confirmButtonText: 'Yes, remove it!',
        cancelButtonText: 'Cancel',
        position: 'center',
        timerProgressBar: true,
        background: '#000',
        color: '#fff',
      });

      if (!result.isConfirmed) return;

      const response = await fetch(`/removeWishlist/${productId}`, {
        method: 'DELETE'
      });

      const data = await response.json();
      if (response.ok && data.status) {
        const productElement = document.getElementById(`product-${productId}`);
        if (productElement) productElement.remove();

        await Swal.fire({
          toast: true,
          position: 'center-right',
          icon: 'success',
          title: data.message,
          html: `<img src="/images/hellNo.gif" alt="GIF" style="margin-top: 10px; width: auto; height: auto;" />`,
          showConfirmButton: false,
          timer: 3000,
          timerProgressBar: true,
          width: 350,
          padding: '1.2em',
          color: '#fff',
          background: '#333'
        });
      } else {
        await Swal.fire({
          toast: true,
          position: 'top-end',
          icon: 'warning',
          title: 'Failed to remove item',
          text: data.message || 'Failed to remove from wishlist',
          showConfirmButton: false,
          timer: 2000,
          timerProgressBar: true
        });
      }
    } catch (error) {
      await Swal.fire({
        toast: true,
        position: 'top-end',
        icon: 'error',
        title: 'Error',
        text: 'Something went wrong',
        showConfirmButton: false,
        timer: 2000,
        timerProgressBar: true
      });
    }
  }
</script>